[["index.html", "Mastering Statistical Process Control Charts in Healthcare A practical, hands-on, step-by-step guide for data scientists using R Synopsis", " Mastering Statistical Process Control Charts in Healthcare A practical, hands-on, step-by-step guide for data scientists using R Jacob Anhøj &amp; Mohammed Amin Mohammed 2024-07-19 Synopsis This is the online version of Mastering Statistical Process Control Charts in Healthcare, a book currently under early development. INTRODUCTION About the Book (contents, target audience, prerequisites, etc.) GitHub PART 1: Understanding Variation What is SPC? History A modern definition SPC and continuous quality improvement – neither can live while the other dies The case for SPC in healthcare Understanding Variation Given two numbers, one will be bigger different numbers may come from the same process same numbers may come from different processes rolling dies and flipping coins when you throw a die and get a seven Patterns of non-random variation in time series data and their interpretation freaks shifts trends waves sawtooths(teeth?) and other repeated patterns Introducing SPC Charts Anatomy and physiology of SPC charts Testing for Non-random Variation in SPC Charts Tests based on sigma limits the 3-sigma test the Western Electric rules Runs analysis – tests based on the distribution of data points around the centre line unusually long runs unusually few crossings look mom, no control limits! – using runs analysis as stand-alone rules with run charts The Magnificent Eight Run chart I chart (aka X chart) MR chart X-bar chart S chart C chart U chart P chart Responding to SPC Signals The voice of the customer vs the voice of the process Conciliating the two voices – or, from RAGs to RICHes RAG = Red, Amber, Green RICH = Respond, Investigate, Celebrate’n Hold PART 2: Constructing SPC Charts with R Your First SPC Charts with Base R A run chart Adding control limits to produce a control chart Calculating Control Limits for “The Magnificent Eight” (minus one) I chart (to screen or not to screen?) MR chart Xbar chart (several methods for sbar) S chart C chart U chart P chart Highlighting Freaks, Shifts, and Trends One R Function to Rule Them All SPC Charts with ggplot2 Introducing qicharts2 – an R Package Tailored Specifically for SPC in Healthcare A Note on Rational Subgrouping and Sampling PART 3: Case Studies and Worked Examples Run chart P Charts for Proportion Data C and U Charts for Count and Rate Data I and MR Chart for Individual Measurement Data X-bar and S Charts for Multiple Measurement Data PART 4: Advanced SPC Techniques Small Multiple Plots for Multivariate Data Funnel Plots for Categorical Subgroups Pareto Charts for Ranking Problems SPC Charts for Rare Events T Charts for Time Between Events G Charts for Opportunities Between Cases Bernoulli CUSUM charts for binary data Prime Charts for Count Data with Very Large Sample Sizes Screened I chart (eliminating freak moving ranges before calculating limits) Improved (normalised) I chart Dual charting When to Split SPC Charts When to Transform Data Before Plotting High Frequency/Volume Data Scaling Up Charts (technical issues, tabular charts, rid) CUSUM and EWMA Charts Multivariate charts Phase One and Phase Two Applications of SPC PART 5: Best Practices and Tips Tips for Effective SPC Implementation Automating production of SPC charts Engaging stakeholders Continuous monitoring and improvement. Problems with SPC (challenges) Common Pitfalls to Avoid Data issues, misinterpretation of charts Overreacting to common cause variation (too many or over-sensitive runs rules, too tight control limits) Automating recalculation of control limits One-to-one relation between PDSA cycles and dots on the plot PART 6: Conclusion and Final Thoughts Summary of Key Points The Control Charts vs Run Charts Debate Emerging trends in SPC and healthcare analytics Encouragement for Continuous Learning and Application Final Thoughts PART 9¾: Nerd Stuff Introducing R Basic Statistical Concepts Data types (counts and measurements) Distributions centre (mean, median) spread (range, percentiles, standard deviation) shape (symmetric, skewed) Principles for Data Visualisation Histograms and boxplots for measurement data distributions Barplots for count data distributions Scatter plots for relations between measurement data Point-and-line plots for time series data Data Preparation with R Sources of healthcare data Indicator types: measurements, counts, rates, proportions Getting data in shape for visualisation with R Runs Analysis Revisited The joint distribution of longest run and Number of crossings Improving runs analysis using the bestbox and cutbox rules APPENDICES Resources and Further Readings Recommended books Web sites, forums, and communities Other R packages for SPC (qcc, spc, …) Formulas and R Functions for Calculating Control Limits Table of Parameters for the Xbar and S Charts Table of Critical Values for Longest Runs and Number of Crossings Glossary of Terms Ideas for papers RAGs to RICHes (two voices) Big data issues – CUSUM vs 3000 SPC charts Improved I chart The problem with SPC "],["preface.html", "Preface", " Preface This book is about the practical application of statistical process control (SPC) methodology in healthcare. SPC is based on a fundamental intuitive insight – that processes are subject to two sources of variation: common cause and special cause variation. This simple yet profound insight enables us to monitor, understand, and improve a wide range of processes. With this insight comes a set of intuitive visual tools, run and control charts, that make it easy to tell common from special cause variation. Nevertheless a systematic review concluded … although SPC charts may be easy to use even for patients, clinicians or managers without extensive SPC training, they may not be equally simple to construct correctly. To apply SPC is, paradoxically, both simple and difficult at the same time. — Thor et al. (2007) Consequently, this book aims to ease the construction and production of SPC charts in healthcare using modern software. So what is different about this book? This book is a how to easily produce SPC charts book. Since this involves statistics, computing, and visualisation our software of choice is R – which is often referred to as the lingua franca of statistical computing and visualisation. This book stands out by being a specialized, practical, and modern guide specifically tailored for data scientists in the healthcare sector. Its focus on real-world application, combined with comprehensive coverage of SPC techniques and the use of contemporary tools, makes it a unique and valuable resource. Target Audience: This book aims to help people who want to produce SPC charts in practice using modern software. This book is specifically tailored for data scientists who want to learn how to produce SPC charts using the R programming language. We refer to such people as data scientist whilst recognising that they may be analysts, practitioners, managers, teachers, students, researchers, clinicians or patients. Use of R: Our choice of software is R, which is popular, free, and open source. By being pro-R we are not anti any other software. Indeed we encourage readers to use this book with their preferred software and share it with the world. One major advantage of R (and programming languages in general) is that all the steps and procedures involved in analysing data and constructing graphs and other output are documented in readable form in the source code thus making analyses transparent and reproducible, which is rarely the case with “point-and-click” software. Another advantage of R is that it enables the automation of repeated tasks such as monthly reports, slide decks and dashboards of SPC charts with high quality customisable graphics. Healthcare Focus: While there are many general books on SPC, this book’s focus is on practical applications in healthcare, making it particularly relevant for those working in this field. It addresses the unique challenges and requirements of applying SPC methods in healthcare settings, such as patient safety, clinical outcomes, and operational efficiency as described in an accompanying book (Mohammed 2024). Practical Guide: The book is a practical step-by-step guide, using real-world examples and case studies that enable readers to produce and use SPC charts with confidence. This hands-on approach helps bridge the gap between theory and practice. Comprehensive Coverage: The book covers a comprehensive range of topics within SPC, from basic concepts to advanced techniques. This ensures that both beginners and experienced data scientists can find valuable insights and techniques that can be applied to their work in healthcare. Resources: The book comes with additional resources such as R scripts, datasets, and access to an online GitHub repository. Prerequisites We assume no prior knowledge of SPC, but a basic familiarity with R is required to understand the steps and algorithms for constructing SPC charts. For readers not familiar with R we refer you to some excellent (free) resources for getting started with R including the amazing NHS-R Community. How to use this book If you are new to SPC, then start with Chapter 1. If you are eager to get started with plotting then skip to chapters 5 and 6. Later chapters move to more advanced types of charts and topics for newbies and knowbies. Further resources and datasets can be found on our GitHub repository. We hope you find the book of some use and would appreciate your feedback on how it can be continually improved. About us Jacob Anhøj is a medical doctor with 30+ years of experience along with a diploma in Information Technology. He has published 45+ papers and two books and has extensive teaching experience. His main professional interest is patient safety and healthcare quality in general and statistical methods for quality improvement in particular. He has contributed to the development of statistical methods for testing for non-random variation in time series data. He is an experienced R user and has published several R packages including qicharts2 for construction and analysis of statistical process control charts. Mohammed Amin Mohammed is Emeritus Professor of Healthcare Quality and Effectiveness at the Faculty of Health Studies, University of Bradford, and Principal Consultant at the Strategy Unit. He has 100+ peer-reviewed publications, including a landmark paper in the Lancet introducing SPC to healthcare (2001) and author of the “Statistical Process Control: Elements of Improving Quality and Safety in Healthcare (2024)”. He founded the NHS-R Community which promotes the use of R in healthcare. JA: jacob@anhoej.net MAM: m.a.mohammed5@bradford.ac.uk References Mohammed, M A. 2024. Statistical Process Control. Elements of Improving Quality and Safety in Healthcare. Cambridge University Press. https://www.cambridge.org/core/elements/statistical-process-control/60B6025BF62017A9A203960A9E223C10. Thor, Johan, Jonas Lundberg, Jakob Ask, Jesper Olsson, Cheryl Carli, Karin Pukk Härenstam, and Mats Brommels. 2007. “Application of Statistical Process Control in Healthcare Improvement: Systematic Review.” BMJ Qual Saf 16: 387–99. https://doi.org/10.1136/qshc.2006.022194. "],["what.html", "Chapter 1 What is SPC", " Chapter 1 What is SPC "],["variation.html", "Chapter 2 Understanding Variation", " Chapter 2 Understanding Variation "],["charts_intro.html", "Chapter 3 Introducing SPC Charts", " Chapter 3 Introducing SPC Charts "],["responding.html", "Chapter 4 Responding to SPC Signals", " Chapter 4 Responding to SPC Signals "],["first-chart.html", "Chapter 5 Your First SPC Charts With Base R 5.1 A run chart blood pressure data 5.2 Adding control limits to produce a control chart 5.3 That’s all, Folks!", " Chapter 5 Your First SPC Charts With Base R From Part 1 of this book we have a good grasp of what SPC is and how SPC charts work. In this chapter we will start constructing SPC charts using only functions from base R. In later chapters we will move to ggplot2and qicharts2. In essence, an SPC charts is a (point-and-)line plot of data over time with a horizontal line to represent the data centre and – in case of a control chart – two lines to represent the estimated upper and lower bounds of the natural variation in data. 5.1 A run chart blood pressure data To construct an SPC chart, all we need are vectors with the y-coordinates of the data points and lines. Consider these data, which show systolic blood pressure measurements (mmHg) for a patient taken in the morning over 26 consecutive days (Mohammed, Worthington, and Woodall 2008). y &lt;- c(169, 172, 175, 174, 161, 142, 174, 171, 168, 174, 180, 194, 161, 181, 175, 176, 186, 166, 157, 183, 177, 171, 185, 176, 181, 174) First we plot a simple point-and-line chart without any helper lines (Figure 5.1): # Make point-and-line plot plot(y, type = &#39;o&#39;) Figure 5.1: Simple run chart (As a side note, this reminds me (JA) of a manager, who once said to me: “You make such beautiful graphs, but can’t you stop them from going up and down all the time.” 😁) To guide the runs analysis we will add the centre line, which in run charts will normally be the median of data points (Figure 5.2): # Create y-coordinates for the centre line cl &lt;- rep(median(y), length(y)) # Plot data and add centre line plot(y, type = &#39;o&#39;) lines(cl) Figure 5.2: Run chart with centre line We find that the longest runs (there are two of them, 14:17 and 23:26) have 5 data points and that the curve crosses the centre line 10 times. With 26 data points and using the runs rules proposed previously, the upper limit for longest run is 8 as is (coincidentally) the lower limit for number of crossings. Consequently, there are no signs of persistent shifts or trends in data over time. 5.2 Adding control limits to produce a control chart We use the same technique to add the lower and upper control limits. Remember that the control limits are usually set to \\(CL \\pm 3 SD\\), where CL is the centre line, usually the mean, and SD is the estimated standard deviation – that is, the standard deviation of the natural variation in data, not the pooled standard deviation that would include both random and any non-random variation. With data consisting of single measurements, we may estimate the common cause standard deviation using the average moving range divided by a constant, 1.128. The moving ranges are the absolute pairwise differences between consecutive data points. We will talk much more about control limits in Chapter 6. # Calulate the centre line (mean) cl &lt;- rep(mean(y), length(y)) # Calculate the average moving range of data mr &lt;- abs(diff(y)) # Print the moving ranges for our viewing pleasure mr ## [1] 3 3 1 13 19 32 3 3 6 6 14 33 20 6 1 10 20 9 26 6 6 14 9 5 7 # Calculate the average moving range amr &lt;- mean(mr) # Calculate the process standard deviation s &lt;- amr / 1.128 # Create y-coordinates for the control limits lcl &lt;- rep(cl - 3 * s, length(y)) ucl &lt;- rep(cl + 3 * s, length(y)) Before we plot data, we need to expand the y-axis limits to make room not only for the data points but also the control limits (Figure 5.3): # Plot data expanding y-axis to make room for all data and lines plot(y, type = &#39;o&#39;, ylim = range(y, lcl, ucl)) # Add lines lines(ucl) lines(cl) lines(lcl) Figure 5.3: Standardised control chart One (freak) data point is below the lower control limit suggesting that this reading has most likely been influenced by something outside the natural process. The control chart itself does not tell what caused the special cause, but it tells us that this data point should be investigated with the purpose of learning and improvement. 5.3 That’s all, Folks! So constructing an SPC chart using R may be done using a few lines of code. In fact, most of the code in this chapter went to prepare the data to be plotted. The charts themselves are rather simple and plotting is the same every time: 1. plot the dots; 2. add the lines. Later we will wrap all the steps in a function that automates the calculation of centre and control lines, highlights signals of non-random variation in data, and makes plots that are a lot nicer to look at than the rather crude ones we have produces so far. In the next chapter we will calculate lines and limits for the SPC charts that are most commonly used in healthcare, “The Magnificent Eight”. References Mohammed, M A, P Worthington, and W H Woodall. 2008. “Plotting Basic Control Charts: Tutorial Notes for Healthcare Practitioners.” BMJ Qual Saf 17 (2): 137–45. https://doi.org/10.1136/qshc.2004.012047. "],["limits.html", "Chapter 6 Calculating Control Limits 6.1 Introducing the spc() function 6.2 Formulas for calculation of control limits 6.3 Count data 6.4 Measurement data 6.5 Control limits in short Control chart constants", " Chapter 6 Calculating Control Limits In the previous chapter we established the basis for constructing SPC charts with R. In this chapter we continue with different types of control charts and how to construct their control limits. 6.1 Introducing the spc() function To avoid repeating ourselves, let’s begin by creating a function to automate the plotting for us. spc &lt;- function( x, # x axis values y = NULL, # data values cl = NA, # centre line lcl = NA, # lower control limit ucl = NA, # upper control limit ... # other parameters passed to the plot() function ) { # if y is missing, set y to x and make a sequence for x if (is.null(y)) { y &lt;- x x &lt;- seq_along(y) } # repeat line values to match the length of y if (length(cl) == 1) cl &lt;- rep(cl, length(y)) if (length(lcl) == 1) lcl &lt;- rep(lcl, length(y)) if (length(ucl) == 1) ucl &lt;- rep(ucl, length(y)) # plot the dots and draw the lines plot(x, y, type = &#39;o&#39;, ylim = range(y, lcl, ucl, na.rm = TRUE), ...) lines(x, cl) lines(x, lcl) lines(x, ucl) } The spc() function takes five arguments of which only the first, x, is mandatory. If only x is provided, a simple line chart will be drawn from the x values. If y is also provided, x values will be used for the x axis. The line arguments (cl, lcl, ucl) are used (if provided) for the centre line and control limits respectively. Line arguments may be given as either single values or vectors of the same length as x. In addition, one may provide additional arguments for the plot() function, e.g. main, xlab, and ylab for title and axis labels. Let’s test it using some random numbers from a normal distribution (more on testing with random numbers in Chapter XX): # initiate random number generator to make results reproducible set.seed(9) # create x and y data coordinates and values for centre line and control limits y &lt;- rnorm(24) # y coordinates x &lt;- seq_along(y) # x coordinates cl &lt;- 0 # centre line = 0 lcl &lt;- -3 # lower control limit = -3 ucl &lt;- 3 # upper control limit = 3 # plot the dots and draw the lines spc(x, y, cl, lcl, ucl) Figure 6.1: Control chart from random normal numbers With this function we are now able to construct all kinds of control charts. All we need to know is how to calculate the centre line and the control limits. 6.2 Formulas for calculation of control limits The formulas for calculation control limits for the most common control charts are provided in Table 6.1. Don’t be alarmed by the number of strange symbols, we will dissect the formulas one by one as we move along. Table 6.1: Formulas for calculating control limits Subgroups Chart type Control limits Assumed distribution Count data Counts C \\(\\bar{c}\\pm3\\sqrt{\\bar{c}}\\) Poisson Rates U \\(\\bar{u}\\pm3\\sqrt{\\frac{\\bar{u}}{n_{i}}}\\) Poisson Proportions P \\(\\bar{p}\\pm3\\sqrt{\\frac{\\bar{p}(1-\\bar{p})}{n_{i}}}\\) Binomial Measurement data Individual measurements I \\(\\bar{x}\\pm2.66\\overline{MR}\\) Normal Moving ranges of individual measurements MR \\(3.267\\overline{MR}\\) Normal Averrages of 2 or more measurements X-bar \\(\\bar{\\bar{x}}\\pm A_{3}\\bar{s}\\) Normal Standard deviations of 2 or more measurements S \\(B_{3}\\bar{s};\\ B_{4}\\bar{s}\\) Normal Generally, data come in two flavours: count data and measurement data. Counts are positive integers that represent counts of events or cases, for example patient falls, surgical complications, or healthy babies. Measurements are data that are measured on continuous scales and may have decimals, for example blood pressure, height and weight, or waiting times. 6.3 Count data There are several types of count data depending on the type of counts involved. In this chapter we will limit ourselves to events and cases. Events are phenomena that happens from time to time and are usually rare and randomly distributed in time and space. Events can for example be the number of cancer cells found in a microscopy slide, the number of patient falls in a month, or the number of shooting stars observed in the night sky. Events are presented as raw counts or rates and are often modelled by the poisson distribution. Cases represent whole units that either possess or do not posses a certain property. Cases can for example be surgical procedures that had one or more complications, patients who died (or survived), or procedures that completed according to a standard. Cases are presented as proportions or percentages and are often modelled by the binomial distribution. For count charts in this chapter we will use the bacteremia data set: # read data from file bact &lt;- read.csv(&#39;data/bacteremia.csv&#39;, comment.char = &#39;#&#39;, colClasses = c( &#39;Date&#39;, &#39;integer&#39;, &#39;integer&#39;, &#39;integer&#39;, &#39;integer&#39; )) # print the first six rows head(bact) ## month ha_infections risk_days deaths patients ## 1 2017-01-01 24 32421 23 100 ## 2 2017-02-01 29 29349 22 105 ## 3 2017-03-01 26 32981 13 99 ## 4 2017-04-01 16 29588 14 85 ## 5 2017-05-01 28 30856 17 98 ## 6 2017-06-01 16 30544 15 85 The variables are: month (date): month of infection ha_infections (numeric): number of hospital acquired infections risk_days (numeric): number of patient days without infection deaths (numeric): number of patients who died within 30-day after a hospital or community acquired (all-cause) infection patients (numeric): number of patients with all-cause infection We think of infections as events and patients as cases. The difference may seem insignificant, but consider infections as events that can occur more than once in the same patient, while a patient is either infected or not infected and either dead or alive. Because of different statistical properties of events and cases we have different methods for calculating control limits for them. We use C charts for event counts and U chart for event rates. For case proportions we use the P chart. Note that rates and proportions both have numerators and denominators, but they have very different statistical properties. With rates, the numerator and denominator are different things, for example infections and time. With proportions, the numerator and denominator are always the same thing, for example patients and patients. Since the numerator is a subset of the denominator, proportions cannot be greater than 1 (100%). You may ask: if there is a C chart for count of events, is there not a chart for count of cases? In fact, there is, the NP chart. But it is rarely if ever used in healthcare because it assumes that the denominator is constant between subgroups. It does not make sense to compare 5 out of 10 deaths with 5 our of 50 deaths without taking the different subgroup sizes into account. We could argue that the same is true for C charts – that they assume that the denominator, the area of opportunity, is constant between subgroups. But in practice – as long as the subgroups are approximately the same – C and U charts usually reach the same conclusions. And if this is the case, it is often more useful to present events as counts rather than as rates, which we will see in the examples. 6.3.1 C chart The C charts (C for counts) is the simplest of all control charts and the easiest to produce. The process standard deviation is simply estimated as the square root of the process mean. C charts are appropriate when counting events from (nearly) equally big chunks of time or space. Figure 6.2 shows a C chart of the monthly number of hospital acquired bacteremias. with(bact, { cl &lt;- mean(ha_infections) lcl &lt;- cl - 3 * sqrt(cl) ucl &lt;- cl + 3 * sqrt(cl) # print the limits cat(&#39;UCL =&#39;, ucl, &#39;\\n&#39;) cat(&#39;CL =&#39;, cl, &#39;\\n&#39;) cat(&#39;LCL = &#39;, lcl, &#39;\\n&#39;) # plot the chart spc(month, ha_infections, cl, lcl, ucl, ylab = &#39;Infections&#39;, # y-axis label xlab = &#39;Month&#39;) # x-axis label }) ## UCL = 36.94952 ## CL = 22.66667 ## LCL = 8.38381 Figure 6.2: C control chart of monthly numbers of hospital acquired bacteremias The average monthly number of cases is 22.7, and all data points are within the control limits ranging from 8.4 to 36.9. So if nothing changes, we should expect future infection counts to be around 23, and we should not be surprised if once in a while, we observe as little as 9 or as many as 36 infections in a single month. 6.3.2 U chart U charts are useful when events are counted over chunks of time or space that are not equally sized resulting in “unequal area of opportunity” (hence the U). In our case we might want to adjust for for the number of patient days that may vary depending on the time of year or between organisational units. The U chart adjust for this by presenting rates rather than raw counts. As mentioned before, events are often rare in comparison to their areas of opportunity. So to avoid very small numbers on the y-axis it may be useful to multiply the y-axis by some factor before plotting. In Figure 6.3 we multiply by 10,000 to display infections per 10,000 risk days rather than per day. with(bact, { y &lt;- ha_infections / risk_days # rates to plot cl &lt;- sum(ha_infections) / sum(risk_days) # overall mean rate, centre line s &lt;- sqrt(cl / risk_days) # standard deviation lcl &lt;- cl - 3 * s # lower control limit ucl &lt;- cl + 3 * s # upper control limit # multiply y axis to present infections per 10,000 risk days multiply &lt;- 10000 y &lt;- y * multiply cl &lt;- cl * multiply lcl &lt;- lcl * multiply ucl &lt;- ucl * multiply spc(month, y, cl, lcl, ucl, ylab = &#39;Infections per 10,000 risk days&#39;, xlab = &#39;Month&#39;) }) Figure 6.3: U chart of monthly number of infections per 10,000 risk days The U chart shows that on average we have 7.5 infections per 10,000 risk days, and that all data points are between the control limits ranging from about 3.5 to 12. We see that the control limits vary depending on the denominator (risk days), for each data point. Large denominator \\(\\Rightarrow\\) narrow limits; small denominator \\(\\Rightarrow\\) wide limits. In cases like this where the denominator – the area of opportunity – only varies little between subgroups, the U charts adds little compared to the C chart. For pedagogical reasons we may prefer the C chart. It is a lot easier to relate to 23 infections per month than to 7.5 infections per 10,000 risk days. 6.3.3 P chart P charts are for proportions (or percentages). Figure 6.4 shows the monthly proportion of patients with bacteremia who died within 30 days. with(bact, { y &lt;- deaths / patients cl &lt;- sum(deaths) / sum(patients) # process mean, centre line s &lt;- sqrt((cl * (1 - cl) / patients)) # process standard deviation lcl &lt;- cl - 3 * s # lower control limit ucl &lt;- cl + 3 * s # upper control limit # multiply by 100 to get percentages rather than proportions multiply &lt;- 100 y &lt;- y * multiply cl &lt;- cl * multiply lcl &lt;- lcl * multiply ucl &lt;- ucl * multiply spc(month, y, cl, lcl, ucl, ylab = &#39;%&#39;, xlab = &#39;Month&#39;) }) Figure 6.4: P chart of monthly 30-day mortality rates On average the mortality is 21%, and all data points are within the control limits. Thus, the process appears stable and predictable. 6.4 Measurement data For this section we will use a data set on response times for grade 2 caesarean sections, that is, the time (in minutes) it took from the decision to perform a C-section to the baby was delivered. The goal is to keep the response times below 30 minutes. The csect data frame contains the date and time, the month, and the number of minutes from decision to delivery for 208 grade 2 section over a two-year period. # read raw data csect &lt;- read.csv(&#39;data/csection_delay.csv&#39;, comment.char = &#39;#&#39;, colClasses = c(&#39;POSIXct&#39;, &#39;Date&#39;, &#39;integer&#39;)) # show the first 6 rows head(csect) ## datetime month delay ## 1 2016-01-06 03:55:40 2016-01-01 22 ## 2 2016-01-06 20:52:34 2016-01-01 22 ## 3 2016-01-07 02:50:43 2016-01-01 29 ## 4 2016-01-07 22:32:27 2016-01-01 28 ## 5 2016-01-09 14:56:09 2016-01-01 22 ## 6 2016-01-09 21:21:24 2016-01-01 20 6.4.1 I chart (aka X chart) The “I” in I chart stand for “individuals” because it plots individual values from subgroups of size 1. I charts are also often referred to as X charts. I charts are useful when measurements come from individual units, for example waiting times or blood pressure measurements for individual patients. As we will see later, I charts are in fact useful for all kinds of data because they base their estimations on the actual variation that is present in data rather than theoretical parameters from assumed distributions. For this reason, the I chart is considered the Swiss army knife of SPC. When subgroups consist of single values we use the pairwise absolute difference between data points, the average moving range (\\(\\overline{MR}\\)), as an estimate of the common cause variation. By dividing this value with 1.128 we get an estimate of the process standard deviation. Alternatively, one may multiply \\(\\overline{MR}\\) by 3 / 1.128 = 2.66 to get 3 \\(SD\\)s. Let’s have a look at individual delay times for the latest 60 C-sections (Figure 6.5). with(tail(csect, 60), { xbar &lt;- mean(delay) # mean value, centre line mr &lt;- abs(diff(delay)) # moving ranges amr &lt;- mean(mr) # average moving range s &lt;- amr / 1.128 # process standard deviation spc(delay, cl = xbar, lcl = xbar - 3 * s, ucl = xbar + 3 * s) }) Figure 6.5: I-chart On average, the delay time for these cases is 24 minutes. The control limits tell us that we should expect future delays to be in the range of 11 to 37 minutes. Two data points are outside the control limits (#3 and #31) suggesting that these case were special and that it might be useful to have a closer look to find out what went well with case #3 and not so well with case #31. 6.4.2 MR chart The MR chart plots the moving ranges of individual values. It is a companion to the I chart. Since moving ranges cannot be negative, the MR chart has no lower control limit. with(tail(csect, 60), { mr &lt;- c(NA, abs(diff(delay))) amr &lt;- mean(mr, na.rm = TRUE) spc(mr, cl = amr, ucl = 3.267 * amr) }) Figure 6.6: MR-chart Note that there is one less moving range than individual values. To “synchronise” the charts, we insert an NA value at the beginning of the MR-chart. We may plot the two charts together (Figure 6.7): with(tail(csect, 60), { xbar &lt;- mean(delay) mr &lt;- c(NA, abs(diff(delay))) amr &lt;- mean(mr, na.rm = TRUE) op &lt;- par(mfrow = c(2, 1), # setting up plotting area mar = c(5, 5, 2, 1)) spc(delay, cl = xbar, lcl = xbar - 2.66 * amr, ucl = xbar + 2.66 * amr, main = &#39;I-chart&#39;, ylab = &#39;Delay (minutes)&#39;, xlab = &#39;&#39;) spc(mr, cl = amr, ucl = 3.267 * amr, main = &#39;MR-chart&#39;, ylab = &#39;Moving range (minutes)&#39;, xlab = &#39;C-section #&#39;) par(op) # restoring plotting area }) Figure 6.7: I- and MR-charts The MR-chart finds five data points outside the limits. These coincide with the special causes found by the I chart and supports our conclusion that these deliveries were special. Note that each data point on the I chart (except the first and last ones) produces two moving ranges on the MR chart. Also note that delivery #4, which is very close to, but not above, the upper control limit in the I chart actually produced a signal in the MR chart. One may speculate if the very short delay for delivery #3 and the long delay for delivery #4 are linked in some way. 6.4.3 X-bar chart The X-bar chart is appropriate when the subgroups consist of samples of two or more measurements. To plot a control chart of the monthly average delays, we must first aggregate data to find the mean and the standard deviation of delay times and the number of sections per month. # aggregate data by month csect.agg &lt;- aggregate(delay ~ month, csect, function(x) c(mean = mean(x), sd = sd(x), n = length(x))) # make data into a nice data frame csect.agg &lt;- do.call(data.frame, csect.agg) # print the first 6 rows head(csect.agg) ## month delay.mean delay.sd delay.n ## 1 2016-01-01 23.85714 3.387653 7 ## 2 2016-02-01 24.45455 6.137811 11 ## 3 2016-03-01 22.45455 6.638729 11 ## 4 2016-04-01 22.66667 3.041381 9 ## 5 2016-05-01 22.50000 3.891382 8 ## 6 2016-06-01 22.00000 6.204837 5 Next, we calculate the centre line and the control limits using the formula in Table 6.1 where \\(\\bar{\\bar{x}}\\) (pronounced x bar bar) is the weighted mean of the subgroup means, \\(\\bar{s}\\) (s bar) is the weighted mean of the subgroup standard deviations, and \\(A_3\\) is a constant that depends on the subgroup size. See the section on chart constants at the end of this chapter for the R code involved in calculating \\(A_3\\) and other constants for control chart construction. With the aggregated data we are now able to construct the X-bar chart (Figure 6.8). with(csect.agg, { xbarbar &lt;- weighted.mean(delay.mean, delay.n) # centre line sbar &lt;- weighted.mean(delay.sd, delay.n) # process standard deviation a3 &lt;- a3(delay.n) # A3 constant spc(x = month, y = delay.mean, cl = xbarbar, lcl = xbarbar - a3 * sbar, ucl = xbarbar + a3 * sbar) }) Figure 6.8: X bar chart Figure 6.8 shows the average delay time per month. On average the delay time is 23 minutes (= centre line) and all data points fall between the control limits suggesting that the process is stable and predictable. As with U and P charts the control limits vary from month to month reflecting the varying subgroup sizes – small subgroups \\(\\Rightarrow\\) wide limits; large subgroups \\(\\Rightarrow\\) narrow limits. Be careful not to fall for the temptation to conclude that since no months are above the target of 30 minutes, all is well. The 30-minute target concerns the delay time of individual sections, not the averages. Even if the averages are well below the target, individuals may be above, which we already noticed from the I chart above. 6.4.4 S chart The S chart is usually plotted alongside the X-bar chart and shows the within subgroup variation. It is useful for detecting changes in the spread of data over time. To calculate the centre and control limits for the S chart we need to know the process standard deviation, \\(\\bar{S}\\) (same as for the X-bar chart), and the two constants \\(B_3\\) and \\(B_4\\) From Table 6.1. with(csect.agg, { sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled SD, centre line b3 &lt;- b3(delay.n) # B3 constant b4 &lt;- b4(delay.n) # B4 constant spc(x = month, y = delay.sd, cl = sbar, lcl = b3 * sbar, ucl = b4 * sbar) }) Figure 6.9: S chart Figure 6.9 shows the average standard deviation of delay times per month. On average the standard deviation is 4.7 minutes (= centre line) and all data points fall between the control limits suggesting that the process is stable and predictable. We may plot the X-bar and S charts together (Figure 6.10): with(csect.agg, { xbarbar &lt;- weighted.mean(delay.mean, delay.n) # pooled average sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled standard deviation a3 &lt;- a3(delay.n) # A3 constant b3 &lt;- b3(delay.n) # B3 constant b4 &lt;- b4(delay.n) # B4 constant op &lt;- par(mfrow = c(2, 1), mar = c(3, 5, 2, 1)) spc(month, delay.mean, cl = xbarbar, lcl = xbarbar - a3 * sbar, ucl = xbarbar + a3 * sbar, main = &#39;X-bar Chart&#39;, xlab = &#39;&#39;) spc(month, delay.sd, cl = sbar, lcl = b3 * sbar, ucl = b4 * sbar, main = &#39;S chart&#39;, xlab = &#39;&#39;) par(op) }) Figure 6.10: X-bar and S charts 6.5 Control limits in short Control limits attempt to estimate the borders of the natural common cause process variation. They are placed 3 standard deviations above and below the centre line, which is usually the (weighted) mean of the subgroup means. The procedure for calculating control limits depends on the type of data involved, but the interpretation of charts are the same regardless of data type. In the next chapter we will improve our plots by adding visual clues to highlight signs of non-random variation. Control chart constants a3 &lt;- function(n) { 3 / (c4(n) * sqrt(n)) } b3 &lt;- function(n) { pmax(0, 1 - 3 * c5(n) / c4(n)) } b4 &lt;- function(n) { 1 + 3 * c5(n) / c4(n) } c4 &lt;- function(n) { n[n &lt;= 1] &lt;- NA sqrt(2 / (n - 1)) * exp(lgamma(n / 2) - lgamma((n - 1) / 2)) } c5 &lt;- function(n) { sqrt(1 - c4(n)^2) } "],["highlighting.html", "Chapter 7 Highlighting Freaks, Shifts, and Trends", " Chapter 7 Highlighting Freaks, Shifts, and Trends "],["r_function.html", "Chapter 8 One R Function to Rule Them All", " Chapter 8 One R Function to Rule Them All "],["ggplot.html", "Chapter 9 SPC Charts with ggplot2", " Chapter 9 SPC Charts with ggplot2 "],["qicharts.html", "Chapter 10 Introducing qicharts2", " Chapter 10 Introducing qicharts2 "],["subgrouping.html", "Chapter 11 A Note on Rational Subgrouping and Sampling", " Chapter 11 A Note on Rational Subgrouping and Sampling "],["case_run.html", "Chapter 12 Run Chart for Any Type of Data", " Chapter 12 Run Chart for Any Type of Data "],["case_p.html", "Chapter 13 P Chart for Proportion Data", " Chapter 13 P Chart for Proportion Data "],["case_c_u.html", "Chapter 14 C and U Charts for Counts and Rates", " Chapter 14 C and U Charts for Counts and Rates "],["case_i_mr.html", "Chapter 15 I and MR Chart for Individual Measurement Data", " Chapter 15 I and MR Chart for Individual Measurement Data "],["case_xbar_s.html", "Chapter 16 X-bar and S Charts for Multiple Measurement Data", " Chapter 16 X-bar and S Charts for Multiple Measurement Data "],["references.html", "References", " References Mohammed, M A. 2024. Statistical Process Control. Elements of Improving Quality and Safety in Healthcare. Cambridge University Press. https://www.cambridge.org/core/elements/statistical-process-control/60B6025BF62017A9A203960A9E223C10. Mohammed, M A, P Worthington, and W H Woodall. 2008. “Plotting Basic Control Charts: Tutorial Notes for Healthcare Practitioners.” BMJ Qual Saf 17 (2): 137–45. https://doi.org/10.1136/qshc.2004.012047. Thor, Johan, Jonas Lundberg, Jakob Ask, Jesper Olsson, Cheryl Carli, Karin Pukk Härenstam, and Mats Brommels. 2007. “Application of Statistical Process Control in Healthcare Improvement: Systematic Review.” BMJ Qual Saf 16: 387–99. https://doi.org/10.1136/qshc.2006.022194. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
