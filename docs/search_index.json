[["index.html", "Mastering Statistical Process Control Charts in Healthcare A practical, hands-on, step-by-step guide for data scientists using R Synopsis", " Mastering Statistical Process Control Charts in Healthcare A practical, hands-on, step-by-step guide for data scientists using R Jacob Anhøj &amp; Mohammed Amin Mohammed 2024-08-09 Synopsis This is the online version of Mastering Statistical Process Control Charts in Healthcare, a book currently under early development. INTRODUCTION About the Book (contents, target audience, prerequisites, etc.) GitHub PART 1: Understanding Variation What is SPC? History A modern definition SPC and continuous quality improvement – neither can live while the other dies The case for SPC in healthcare Understanding Variation Given two numbers, one will be bigger different numbers may come from the same process same numbers may come from different processes rolling dies and flipping coins when you throw a die and get a seven Patterns of non-random variation in time series data and their interpretation freaks shifts trends waves sawtooths(teeth?) and other repeated patterns Introducing SPC Charts Anatomy and physiology of SPC charts Testing for Non-random Variation in SPC Charts Tests based on sigma limits the 3-sigma test the Western Electric rules Runs analysis – tests based on the distribution of data points around the centre line unusually long runs unusually few crossings look mom, no control limits! – using runs analysis as stand-alone rules with run charts The Magnificent Eight Run chart I chart (aka X chart) MR chart X-bar chart S chart C chart U chart P chart Responding to SPC Signals The voice of the customer vs the voice of the process Conciliating the two voices – or, from RAGs to RICHes RAG = Red, Amber, Green RICH = Respond, Investigate, Celebrate’n Hold PART 2: Constructing SPC Charts with R Your First SPC Charts with Base R A run chart Adding control limits to produce a control chart Calculating Control Limits for “The Magnificent Eight” (minus one) I chart (to screen or not to screen?) MR chart Xbar chart (several methods for sbar) S chart C chart U chart P chart Highlighting Freaks, Shifts, and Trends One R Function to Rule Them All SPC Charts with ggplot2 Introducing qicharts2 – an R Package Tailored Specifically for SPC in Healthcare A Note on Rational Subgrouping and Sampling PART 3: Case Studies and Worked Examples Run chart P Charts for Proportion Data C and U Charts for Count and Rate Data I and MR Chart for Individual Measurement Data X-bar and S Charts for Multiple Measurement Data PART 4: Advanced SPC Techniques Small Multiple Plots for Multivariate Data Funnel Plots for Categorical Subgroups Pareto Charts for Ranking Problems SPC Charts for Rare Events T Charts for Time Between Events G Charts for Opportunities Between Cases Bernoulli CUSUM charts for binary data Prime Charts for Count Data with Very Large Sample Sizes Screened I chart (eliminating freak moving ranges before calculating limits) Improved (normalised) I chart Dual charting When to Split SPC Charts When to Transform Data Before Plotting High Frequency/Volume Data Scaling Up Charts (technical issues, tabular charts, rid) CUSUM and EWMA Charts Multivariate charts Phase One and Phase Two Applications of SPC PART 5: Best Practices and Tips Tips for Effective SPC Implementation Automating production of SPC charts Engaging stakeholders Continuous monitoring and improvement. Problems with SPC (challenges) Common Pitfalls to Avoid Data issues, misinterpretation of charts Overreacting to common cause variation (too many or over-sensitive runs rules, too tight control limits) Automating recalculation of control limits One-to-one relation between PDSA cycles and dots on the plot PART 6: Conclusion and Final Thoughts Summary of Key Points The Control Charts vs Run Charts Debate Emerging trends in SPC and healthcare analytics Encouragement for Continuous Learning and Application Final Thoughts PART 9¾: Nerd Stuff Introducing R Basic Statistical Concepts Data types (counts and measurements) Distributions centre (mean, median) spread (range, percentiles, standard deviation) shape (symmetric, skewed) Principles for Data Visualisation Histograms and boxplots for measurement data distributions Barplots for count data distributions Scatter plots for relations between measurement data Point-and-line plots for time series data Data Preparation with R Sources of healthcare data Indicator types: measurements, counts, rates, proportions Getting data in shape for visualisation with R Runs Analysis Revisited The joint distribution of longest run and Number of crossings Improving runs analysis using the bestbox and cutbox rules APPENDICES Resources and Further Readings Recommended books Web sites, forums, and communities Other R packages for SPC (qcc, spc, …) Formulas and R Functions for Calculating Control Limits Table of Parameters for the Xbar and S Charts Table of Critical Values for Longest Runs and Number of Crossings Glossary of Terms Ideas for papers RAGs to RICHes (two voices) Big data issues – CUSUM vs 3000 SPC charts Improved I chart The problem with SPC "],["preface.html", "Preface", " Preface This book is about the practical application of statistical process control (SPC) methodology in healthcare. SPC is based on a fundamental intuitive insight – that processes are subject to two sources of variation: common cause and special cause variation. This simple yet profound insight enables us to monitor, understand, and improve a wide range of processes. With this insight comes a set of intuitive visual tools, run and control charts, that make it easy to tell common from special cause variation. Nevertheless a systematic review concluded … although SPC charts may be easy to use even for patients, clinicians or managers without extensive SPC training, they may not be equally simple to construct correctly. To apply SPC is, paradoxically, both simple and difficult at the same time. — Thor et al. (2007) Consequently, this book aims to ease the construction and production of SPC charts in healthcare using modern software. So what is different about this book? This book is a how to easily produce SPC charts book. Since this involves statistics, computing, and visualisation our software of choice is R – which is often referred to as the lingua franca of statistical computing and visualisation. This book stands out by being a specialized, practical, and modern guide specifically tailored for data scientists in the healthcare sector. Its focus on real-world application, combined with comprehensive coverage of SPC techniques and the use of contemporary tools, makes it a unique and valuable resource. Target Audience: This book aims to help people who want to produce SPC charts in practice using modern software. This book is specifically tailored for data scientists who want to learn how to produce SPC charts using the R programming language. We refer to such people as data scientist whilst recognising that they may be analysts, practitioners, managers, teachers, students, researchers, clinicians or patients. Use of R: Our choice of software is R, which is popular, free, and open source. By being pro-R we are not anti any other software. Indeed we encourage readers to use this book with their preferred software and share it with the world. One major advantage of R (and programming languages in general) is that all the steps and procedures involved in analysing data and constructing graphs and other output are documented in readable form in the source code thus making analyses transparent and reproducible, which is rarely the case with “point-and-click” software. Another advantage of R is that it enables the automation of repeated tasks such as monthly reports, slide decks and dashboards of SPC charts with high quality customisable graphics. Healthcare Focus: While there are many general books on SPC, this book’s focus is on practical applications in healthcare, making it particularly relevant for those working in this field. It addresses the unique challenges and requirements of applying SPC methods in healthcare settings, such as patient safety, clinical outcomes, and operational efficiency as described in an accompanying book (Mohammed 2024). Practical Guide: The book is a practical step-by-step guide, using real-world examples and case studies that enable readers to produce and use SPC charts with confidence. This hands-on approach helps bridge the gap between theory and practice. Comprehensive Coverage: The book covers a comprehensive range of topics within SPC, from basic concepts to advanced techniques. This ensures that both beginners and experienced data scientists can find valuable insights and techniques that can be applied to their work in healthcare. Resources: The book comes with additional resources such as R scripts, datasets, and access to an online GitHub repository. Prerequisites We assume no prior knowledge of SPC, but a basic familiarity with R is required to understand the steps and algorithms for constructing SPC charts. For readers not familiar with R we refer you to some excellent (free) resources for getting started with R including the amazing NHS-R Community. How to use this book If you are new to SPC, then start with Chapter 1. If you are eager to get started with plotting then skip to chapters 5 and 6. Later chapters move to more advanced types of charts and topics for newbies and knowbies. Further resources and datasets can be found on our GitHub repository. We hope you find the book of some use and would appreciate your feedback on how it can be continually improved. About us Jacob Anhøj is a medical doctor with 30+ years of experience along with a diploma in Information Technology. He has published 45+ papers and two books and has extensive teaching experience. His main professional interest is patient safety and healthcare quality in general and statistical methods for quality improvement in particular. He has contributed to the development of statistical methods for testing for non-random variation in time series data. He is an experienced R user and has published several R packages including qicharts2 for construction and analysis of statistical process control charts. Mohammed Amin Mohammed is Emeritus Professor of Healthcare Quality and Effectiveness at the Faculty of Health Studies, University of Bradford, and Principal Consultant at the Strategy Unit. He has 100+ peer-reviewed publications, including a landmark paper in the Lancet introducing SPC to healthcare (2001) and author of the “Statistical Process Control: Elements of Improving Quality and Safety in Healthcare (2024)”. He founded the NHS-R Community which promotes the use of R in healthcare. JA: jacob@anhoej.net MAM: m.a.mohammed5@bradford.ac.uk References Mohammed, M A. 2024. Statistical Process Control. Elements of Improving Quality and Safety in Healthcare. Cambridge University Press. https://www.cambridge.org/core/elements/statistical-process-control/60B6025BF62017A9A203960A9E223C10. Thor, Johan, Jonas Lundberg, Jakob Ask, Jesper Olsson, Cheryl Carli, Karin Pukk Härenstam, and Mats Brommels. 2007. “Application of Statistical Process Control in Healthcare Improvement: Systematic Review.” BMJ Qual Saf 16: 387–99. https://doi.org/10.1136/qshc.2006.022194. "],["what.html", "Chapter 1 What is SPC", " Chapter 1 What is SPC "],["variation.html", "Chapter 2 Understanding Variation", " Chapter 2 Understanding Variation "],["charts_intro.html", "Chapter 3 Introducing SPC Charts", " Chapter 3 Introducing SPC Charts "],["responding.html", "Chapter 4 Responding to SPC Signals", " Chapter 4 Responding to SPC Signals "],["first-chart.html", "Chapter 5 Your First SPC Charts With Base R 5.1 A run chart of blood pressure data 5.2 Adding control limits to produce a control chart 5.3 That’s all, Folks!", " Chapter 5 Your First SPC Charts With Base R From Part 1 of this book we have a good grasp of what SPC is and how SPC charts work. In this chapter we will start constructing SPC charts using functions from base R. In later chapters we will include functions from ggplot2and qicharts2. In essence, an SPC charts is a (point-and-)line plot of data over time with a horizontal line to represent the data centre and – in case of a control chart – two lines to represent the estimated upper and lower boundaries of the natural variation in data. 5.1 A run chart of blood pressure data Consider these data, which show systolic blood pressure measurements (mm Hg) for a patient taken in the morning over 26 consecutive days (Mohammed, Worthington, and Woodall 2008). systolic &lt;- c(169, 172, 175, 174, 161, 142, 174, 171, 168, 174, 180, 194, 161, 181, 175, 176, 186, 166, 157, 183, 177, 171, 185, 176, 181, 174) First we plot a simple point-and-line chart without any helper lines (Figure 5.1): # Make point-and-line plot plot(systolic, type = &#39;o&#39;) Figure 5.1: Simple run chart (As a side note, this reminds me (JA) of a manager, who once said to me: “You make such beautiful graphs, but can’t you stop them from going up and down all the time.” 😁) To guide the runs analysis we will add the centre line, which in run charts is usually the median of the data points (Figure 5.2): # Create systolic-coordinates for the centre line cl &lt;- rep(median(systolic), length(systolic)) # Plot data and add centre line plot(systolic, type = &#39;o&#39;) lines(cl) Figure 5.2: Run chart with centre line We find that the longest runs (there are two of them, 14:17 and 23:26) have 5 data points and that the curve crosses the centre line 10 times. With 26 data points and using the runs rules proposed previously, the upper limit for longest run is 8 as is (coincidentally) the lower limit for number of crossings. Consequently, there are no signs of persistent shifts or trends in data over time. 5.2 Adding control limits to produce a control chart We use the same technique to add the lower and upper control limits. Remember that the control limits are usually set to \\(CL \\pm 3 SD\\), where CL is the centre line, usually the mean, and SD is the estimated standard deviation – that is, the standard deviation of the natural variation in data, not the pooled standard deviation that would include both random and any non-random variation. With data consisting of single measurements, we may estimate the common cause standard deviation using the average moving range divided by a constant, 1.128. The moving ranges are the absolute pairwise differences between consecutive data points. We will talk much more about control limits in Chapter 6. # Calulate the centre line (mean) cl &lt;- rep(mean(systolic), length(systolic)) # Calculate the average moving range of data mr &lt;- abs(diff(systolic)) # Print the moving ranges for our viewing pleasure mr ## [1] 3 3 1 13 19 32 3 3 6 6 14 33 20 6 1 10 20 9 26 6 6 14 9 5 7 # Calculate the average moving range amr &lt;- mean(mr) # Calculate the process standard deviation s &lt;- amr / 1.128 # Create systolic-coordinates for the control limits lcl &lt;- cl - 3 * s ucl &lt;- cl + 3 * s Before we plot data, we need to expand the systolic-axis limits to make room not only for the data points but also the control limits (Figure 5.3): # Plot data while expanding the systolic-axis to make room for all data and lines plot(systolic, type = &#39;o&#39;, ylim = range(systolic, lcl, ucl)) # Add lines lines(ucl) lines(cl) lines(lcl) Figure 5.3: Standardised control chart One (freak) data point is below the lower control limit suggesting that this reading has most likely been influenced by something outside the natural process. The control chart itself does not tell what caused the special cause, but it tells us that this data point should be investigated with the purpose of learning and improvement. 5.3 That’s all, Folks! So constructing an SPC chart using R may be done using a few lines of code. In fact, most of the code in this chapter went to prepare the data to be plotted. The charts themselves are rather simple and plotting is the same every time: 1. plot the dots; 2. add the lines. Later we will wrap all the steps in a function that automates the calculation of centre and control lines, highlights signals of non-random variation in data, and makes plots that are a lot nicer to look at than the rather crude ones we have produces so far. In the next chapter we will calculate lines and limits for the SPC charts that are most commonly used in healthcare, “The Magnificent Eight”. References Mohammed, M A, P Worthington, and W H Woodall. 2008. “Plotting Basic Control Charts: Tutorial Notes for Healthcare Practitioners.” BMJ Qual Saf 17 (2): 137–45. https://doi.org/10.1136/qshc.2004.012047. "],["limits.html", "Chapter 6 Calculating Control Limits 6.1 Introducing the spc() function 6.2 Count data 6.3 Measurement data 6.4 Control limits in short Control chart constants", " Chapter 6 Calculating Control Limits In the previous chapter we established the basis for constructing SPC charts with R. In this chapter we continue with different types of control charts and how to construct their control limits. 6.1 Introducing the spc() function To avoid repeating ourselves, let’s begin by creating a function to automate the plotting for us. spc &lt;- function( x, # x axis values y = NULL, # data values cl = NA, # centre line lcl = NA, # lower control limit ucl = NA, # upper control limit ... # other parameters passed to the plot() function ) { # if y is missing, set y to x and make a sequence for x if (is.null(y)) { y &lt;- x x &lt;- seq_along(y) } # repeat line values to match the length of y if (length(cl) == 1) cl &lt;- rep(cl, length(y)) if (length(lcl) == 1) lcl &lt;- rep(lcl, length(y)) if (length(ucl) == 1) ucl &lt;- rep(ucl, length(y)) # plot the dots and draw the lines plot(x, y, type = &#39;o&#39;, ylim = range(y, lcl, ucl, na.rm = TRUE), ...) lines(x, cl) lines(x, lcl) lines(x, ucl) } The spc() function takes five arguments of which only the first, x, is mandatory. If only x is provided, a simple line chart will be drawn from the x values. If y is also provided, x values will be used for the x axis. The line arguments (cl, lcl, ucl) are used (if provided) for the centre line and control limits respectively. Line arguments may be given as either single values or vectors of the same length as x. In addition, one may provide additional arguments for the plot() function, e.g. main, xlab, and ylab for title and axis labels. Let us test it with the blood pressure data from Chapter 5 (Figure 6.1). # create an x variable – not that is it necessary in this case, but just because we can day &lt;- seq_along(systolic) # plot data spc(day, systolic, cl, lcl, ucl) Figure 6.1: Control chart of systolic blood pressure With this function we are now able to construct all kinds of control charts. All we need to know is how to calculate the centre line and the control limits. ## Formulas for calculation of control limits The formulas for calculation control limits for the most common control charts are provided in Table 6.1. Don’t be alarmed by the number of strange symbols, we will dissect the formulas one by one as we move along. Table 6.1: Formulas for calculating control limits Subgroups Chart type Control limits Assumed distribution Count data Counts C \\(\\bar{c}\\pm3\\sqrt{\\bar{c}}\\) Poisson Rates U \\(\\bar{u}\\pm3\\sqrt{\\frac{\\bar{u}}{n_{i}}}\\) Poisson Proportions P \\(\\bar{p}\\pm3\\sqrt{\\frac{\\bar{p}(1-\\bar{p})}{n_{i}}}\\) Binomial Measurement data Individual measurements I \\(\\bar{x}\\pm2.66\\overline{MR}\\) Normal Moving ranges of individual measurements MR \\(3.267\\overline{MR}\\) Normal Averrages of 2 or more measurements X-bar \\(\\bar{\\bar{x}}\\pm A_{3}\\bar{s}\\) Normal Standard deviations of 2 or more measurements S \\(B_{3}\\bar{s};\\ B_{4}\\bar{s}\\) Normal Generally, data come in two flavours: count data and measurement data. Counts are positive integers that represent counts of events or cases, for example patient falls, surgical complications, or healthy babies. Measurements are data that are measured on continuous scales and may have decimals, for example blood pressure, height and weight, or waiting times. 6.2 Count data There are several types of count data depending on the type of counts involved. In this chapter we will limit ourselves to events and cases. Events are phenomena that happens from time to time and are usually rare and randomly distributed in time and space. Events can for example be the number of cancer cells found in a microscopy slide, the number of patient falls in a month, or the number of shooting stars observed in the night sky. Events often follow the poisson distribution and are presented as raw counts or rates. Cases represent whole units that either possess or do not posses a certain property. Cases can for example be surgical procedures that had one or more complications, patients who fell, or procedures that completed according to a standard. Cases often follow the binomial distribution and are presented as proportions or percentages. For count charts in this chapter we will use the bacteremia data set: # read data from file bact &lt;- read.csv(&#39;data/bacteremia.csv&#39;, # path to data file comment.char = &#39;#&#39;, # ignore lines that start with &quot;#&quot; colClasses = c( # specify variable types &#39;Date&#39;, &#39;integer&#39;, &#39;integer&#39;, &#39;integer&#39;, &#39;integer&#39; )) # print the first six rows head(bact) ## month ha_infections risk_days deaths patients ## 1 2017-01-01 24 32421 23 100 ## 2 2017-02-01 29 29349 22 105 ## 3 2017-03-01 26 32981 13 99 ## 4 2017-04-01 16 29588 14 85 ## 5 2017-05-01 28 30856 17 98 ## 6 2017-06-01 16 30544 15 85 The variables are: month (date): month of infection ha_infections (numeric): number of hospital acquired infections risk_days (numeric): number of patient days without infection deaths (numeric): number of patients who died within 30-day after a hospital or community acquired (all-cause) infection patients (numeric): number of patients with all-cause infection We use C charts for event counts and U chart for event rates. For case proportions we use the P chart. 6.2.1 C chart The C charts (C for counts) is the simplest of all control charts and the easiest to produce. The process standard deviation is simply estimated as the square root of the process mean. C charts are appropriate when counting events from (nearly) equally big chunks of time or space. Figure 6.2 shows a C chart of the monthly number of hospital acquired bacteremias. with(bact, { cl &lt;- mean(ha_infections) lcl &lt;- cl - 3 * sqrt(cl) ucl &lt;- cl + 3 * sqrt(cl) # print the limits cat(&#39;UCL =&#39;, ucl, &#39;\\n&#39;) cat(&#39;CL =&#39;, cl, &#39;\\n&#39;) cat(&#39;LCL = &#39;, lcl, &#39;\\n&#39;) # plot the chart spc(month, ha_infections, cl, lcl, ucl, ylab = &#39;Infections&#39;, # y-axis label xlab = &#39;Month&#39;) # x-axis label }) ## UCL = 36.94952 ## CL = 22.66667 ## LCL = 8.38381 Figure 6.2: C control chart of monthly numbers of hospital acquired bacteremias The average monthly number of cases is 22.7, and all data points are within the control limits ranging from 8.4 to 36.9. So if nothing changes, we should expect future infection counts to be around 23, and we should not be surprised if once in a while, we observe as little as 9 or as many as 36 infections in a single month. 6.2.2 U chart U charts are useful when events are counted over chunks of time or space that are not equally sized resulting in “unequal area of opportunity” (hence the U). In our case we might want to adjust for for the number of patient days that may vary depending on the time of year or between organisational units. The U chart adjust for this by presenting rates rather than raw counts. As mentioned, events are often rare in comparison to their areas of opportunity. So to avoid very small numbers on the y-axis it may be useful to multiply the y-axis by some factor before plotting. In Figure 6.3 we multiply by 10,000 to display infections per 10,000 risk days rather than per day. with(bact, { y &lt;- ha_infections / risk_days # rates to plot cl &lt;- sum(ha_infections) / sum(risk_days) # overall mean rate, centre line s &lt;- sqrt(cl / risk_days) # standard deviation lcl &lt;- cl - 3 * s # lower control limit ucl &lt;- cl + 3 * s # upper control limit # multiply y axis to present infections per 10,000 risk days multiply &lt;- 10000 y &lt;- y * multiply cl &lt;- cl * multiply lcl &lt;- lcl * multiply ucl &lt;- ucl * multiply spc(month, y, cl, lcl, ucl, ylab = &#39;Infections per 10,000 risk days&#39;, xlab = &#39;Month&#39;) }) Figure 6.3: U chart of monthly number of infections per 10,000 risk days The U chart shows that on average we have 7.5 infections per 10,000 risk days, and that all data points are between the control limits ranging from about 3.5 to 12. We see that the control limits vary depending on the denominator (risk days), for each data point. Large denominator \\(\\Rightarrow\\) narrow limits; small denominator \\(\\Rightarrow\\) wide limits. In cases like this where the denominator – the area of opportunity – only varies little between subgroups, the U charts adds little compared to the C chart. For pedagogical reasons we may prefer the C chart, because it is a lot easier to relate to 23 infections per month than to 7.5 infections per 10,000 risk days. 6.2.3 P chart P charts are for proportions (or percentages). Figure 6.4 shows the monthly percentage of patients with bacteremia who died within 30 days. with(bact, { y &lt;- deaths / patients cl &lt;- sum(deaths) / sum(patients) # process mean, centre line s &lt;- sqrt((cl * (1 - cl) / patients)) # process standard deviation lcl &lt;- cl - 3 * s # lower control limit ucl &lt;- cl + 3 * s # upper control limit # multiply by 100 to get percentages rather than proportions multiply &lt;- 100 y &lt;- y * multiply cl &lt;- cl * multiply lcl &lt;- lcl * multiply ucl &lt;- ucl * multiply spc(month, y, cl, lcl, ucl, ylab = &#39;%&#39;, xlab = &#39;Month&#39;) }) Figure 6.4: P chart of monthly 30-day mortality rates On average the mortality is 21%, and all data points are within the control limits. 6.3 Measurement data For this section we will use a data set on response times for grade 2 caesarean sections, that is, the time (in minutes) it took from the decision to perform a C-section to the baby was delivered. The goal is to keep the response times below 30 minutes. The csect data frame contains the date and time, the month, and the number of minutes from decision to delivery for 208 grade 2 section over a two-year period. # read raw data csect &lt;- read.csv(&#39;data/csection_delay.csv&#39;, comment.char = &#39;#&#39;, colClasses = c(&#39;POSIXct&#39;, &#39;Date&#39;, &#39;integer&#39;)) csect &lt;- csect[order(csect$datetime), ] # show the first 6 rows head(csect) ## datetime month delay ## 1 2016-01-06 03:55:40 2016-01-01 22 ## 2 2016-01-06 20:52:34 2016-01-01 22 ## 3 2016-01-07 02:50:43 2016-01-01 29 ## 4 2016-01-07 22:32:27 2016-01-01 28 ## 5 2016-01-09 14:56:09 2016-01-01 22 ## 6 2016-01-09 21:21:24 2016-01-01 20 6.3.1 I chart (aka X chart) The “I” in I chart stand for “individuals” because it plots individual values from subgroups of size 1. I charts are also often referred to as X charts. I charts are useful when measurements come from individual units, for example waiting times or blood pressure measurements for individual patients. As we will see later, I charts are in fact useful for all kinds of data because they base their estimations on the actual variation that is present in data rather than theoretical parameters from assumed distributions. For this reason, the I chart is considered the Swiss army knife of SPC. When subgroups consist of single values we use the pairwise absolute difference between data points, the average moving range (\\(\\overline{MR}\\)), as an estimate of the common cause variation. By dividing this value with 1.128 we get an estimate of the process standard deviation. Alternatively, we may multiply \\(\\overline{MR}\\) by 3 / 1.128 = 2.66 to get 3 \\(SD\\)s. Let’s have a look at individual delay times for the latest 60 C-sections (Figure 6.5). with(tail(csect, 60), { xbar &lt;- mean(delay) # mean value, centre line mr &lt;- abs(diff(delay)) # moving ranges amr &lt;- mean(mr) # average moving range s &lt;- amr / 1.128 # process standard deviation spc(delay, cl = xbar, lcl = xbar - 3 * s, ucl = xbar + 3 * s) }) Figure 6.5: I-chart On average, the delay time for these cases is 24 minutes. The control limits tell us that we should expect future delays to be in the range of 11 to 37 minutes. Three data points are outside the control limits (#1, #4 and #31) suggesting that these cases were special and that it might be useful to have a closer look to find out what went well with case #1 and not so well with cases #4 and #31. 6.3.2 MR chart The MR chart plots the moving ranges of individual values. It is a companion to the I chart. Since moving ranges can always be zero but never negative, the MR chart has no lower control limit. with(tail(csect, 60), { mr &lt;- c(NA, abs(diff(delay))) amr &lt;- mean(mr, na.rm = TRUE) spc(mr, cl = amr, ucl = 3.267 * amr) }) Figure 6.6: MR-chart Note that there is one less moving range than individual values. To “synchronise” the charts, we insert an NA value at the beginning of the MR-chart. We may plot the two charts together (Figure 6.7): with(tail(csect, 60), { xbar &lt;- mean(delay) mr &lt;- c(NA, abs(diff(delay))) amr &lt;- mean(mr, na.rm = TRUE) op &lt;- par(mfrow = c(2, 1), # setting up plotting area mar = c(5, 5, 2, 1)) spc(delay, cl = xbar, lcl = xbar - 2.66 * amr, ucl = xbar + 2.66 * amr, main = &#39;I-chart&#39;, ylab = &#39;Delay (minutes)&#39;, xlab = &#39;&#39;) spc(mr, cl = amr, ucl = 3.267 * amr, main = &#39;MR-chart&#39;, ylab = &#39;Moving range (minutes)&#39;, xlab = &#39;C-section #&#39;) par(op) # restoring plotting area }) Figure 6.7: I- and MR-charts The MR-chart also finds three data points outside the limits. These coincide with two of the special causes found by the I chart and supports our conclusion that these deliveries were special. Note that each data point on the I chart (except the first and last ones) produces two moving ranges on the MR chart. 6.3.3 X-bar chart The X-bar chart is appropriate when the subgroups consist of samples of two or more measurements. To plot a control chart of the monthly average delays, we must first aggregate data to find the mean and the standard deviation of delay times and the number of sections per month. # aggregate data by month csect.agg &lt;- aggregate(delay ~ month, csect, function(x) c(mean = mean(x), sd = sd(x), n = length(x))) # make data into a nice data frame csect.agg &lt;- do.call(data.frame, csect.agg) # print the first 6 rows head(csect.agg) ## month delay.mean delay.sd delay.n ## 1 2016-01-01 23.85714 3.387653 7 ## 2 2016-02-01 24.45455 6.137811 11 ## 3 2016-03-01 22.45455 6.638729 11 ## 4 2016-04-01 22.66667 3.041381 9 ## 5 2016-05-01 22.50000 3.891382 8 ## 6 2016-06-01 22.00000 6.204837 5 Next, we calculate the centre line and the control limits using the formula in Table 6.1 where \\(\\bar{\\bar{x}}\\) (pronounced x bar bar) is the weighted mean of the subgroup means, \\(\\bar{s}\\) (s bar) is the weighted mean of the subgroup standard deviations, and \\(A_3\\) is a constant that depends on the subgroup size. See the section on chart constants at the end of this chapter for the R code involved in calculating \\(A_3\\) and other constants for control chart construction. With the aggregated data we are now able to construct the X-bar chart (Figure 6.8). with(csect.agg, { xbarbar &lt;- weighted.mean(delay.mean, delay.n) # centre line sbar &lt;- weighted.mean(delay.sd, delay.n) # process standard deviation a3 &lt;- a3(delay.n) # A3 constant spc(x = month, y = delay.mean, cl = xbarbar, lcl = xbarbar - a3 * sbar, ucl = xbarbar + a3 * sbar) }) Figure 6.8: X bar chart Figure 6.8 shows the average delay time per month. On average the delay time is 23 minutes (= centre line) and all data points fall between the control limits suggesting that the process is stable and predictable. As with U and P charts the control limits vary from month to month reflecting the varying subgroup sizes – small subgroups \\(\\Rightarrow\\) wide limits; large subgroups \\(\\Rightarrow\\) narrow limits. Be careful not to fall for the temptation to conclude that since no months are above the target of 30 minutes, all is well. The 30-minute target concerns the delay time of individual sections, not the averages. Even if the averages are well below the target, individuals may be above, which we already noticed from the I chart above. 6.3.4 S chart The S chart is usually plotted alongside the X-bar chart and shows the within subgroup variation. It is useful for detecting changes in the spread of data over time. To calculate the centre and control limits for the S chart we need to know the process standard deviation, \\(\\bar{S}\\) (same as for the X-bar chart), and the two constants \\(B_3\\) and \\(B_4\\) From Table 6.1. with(csect.agg, { sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled SD, centre line b3 &lt;- b3(delay.n) # B3 constant b4 &lt;- b4(delay.n) # B4 constant spc(x = month, y = delay.sd, cl = sbar, lcl = b3 * sbar, ucl = b4 * sbar) }) Figure 6.9: S chart Figure 6.9 shows the average standard deviation of delay times per month. On average the standard deviation is 4.7 minutes and all data points fall between the control limits. We may plot the X-bar and S charts together (Figure 6.10): with(csect.agg, { xbarbar &lt;- weighted.mean(delay.mean, delay.n) # pooled average sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled standard deviation a3 &lt;- a3(delay.n) # A3 constant b3 &lt;- b3(delay.n) # B3 constant b4 &lt;- b4(delay.n) # B4 constant op &lt;- par(mfrow = c(2, 1), mar = c(3, 5, 2, 1)) spc(month, delay.mean, cl = xbarbar, lcl = xbarbar - a3 * sbar, ucl = xbarbar + a3 * sbar, main = &#39;X-bar Chart&#39;, xlab = &#39;&#39;) spc(month, delay.sd, cl = sbar, lcl = b3 * sbar, ucl = b4 * sbar, main = &#39;S chart&#39;, xlab = &#39;&#39;) par(op) }) Figure 6.10: X-bar and S charts 6.4 Control limits in short Control limits attempt to estimate the boundaries of the natural common cause process variation. They are placed 3 standard deviations above and below the centre line, which is the (weighted) mean of the subgroup means. The procedure for calculating control limits depends on the type of data involved, but the interpretation of charts are the same regardless of data type. In the next chapter we will improve our plots by adding visual clues to highlight signs of non-random variation. Control chart constants a3 &lt;- function(n) { 3 / (c4(n) * sqrt(n)) } b3 &lt;- function(n) { pmax(0, 1 - 3 * c5(n) / c4(n)) } b4 &lt;- function(n) { 1 + 3 * c5(n) / c4(n) } c4 &lt;- function(n) { n[n &lt;= 1] &lt;- NA sqrt(2 / (n - 1)) * exp(lgamma(n / 2) - lgamma((n - 1) / 2)) } c5 &lt;- function(n) { sqrt(1 - c4(n)^2) } "],["highlighting.html", "Chapter 7 Highlighting Freaks, Shifts, and Trends 7.1 Introducing the cdiff data set 7.2 Improved spc() function 7.3 Highlighting special cause variation in short Runs Analysis", " Chapter 7 Highlighting Freaks, Shifts, and Trends In the previous chapter we calculated control limits for the most common types of control charts. Control limits show the boundaries of the natural common cause process variation. Thus, data points outside the control limits (freaks) are signals of special cause variation in data – that is unexpected change caused by something outside the usual system. Control limits are designed to identify rather large (&gt; 2SD), possibly transient, changes in the system. However, as discussed in Part 1 of this book, minor to moderate changes in the form of shifts or trends in data may go unnoticed by the control limits for long periods of time. For this purpose, many supplementary tests (rules) have been suggested. Most known are the Western Electric Rules introduced in the 1950s. The WE rules are based on the distribution of data points relative to the 1, 2, and 3 SD limits. Recently we introduced two simple rules that rely only on the distribution of data points around the centre line, the shift and crossings rules that look for unusually long runs of data points on the same side of the centre line or unusually few crossings of the centre line (Anhøj and Olesen (2014)). The shift and crossings rules are comparable to the WE rules in their sensitivity to minor and moderate sustained shifts and trends in data and may be used alone with run charts without control limits (Anhøj (2015), Anhøj and Wentzel-Larsen (2018)). In this chapter we will improve the spc() function to automatically visualise special cause variation in the form of freaks, shifts, and trends. 7.1 Introducing the cdiff data set The cdiff data set contains 24 observations of monthly numbers of hospital acquired Clostridioides difficile infections from an acute care hospital. # read data from file cdiff &lt;- read.csv(&#39;data/cdiff.csv&#39;, comment.char = &#39;#&#39;, colClasses = c(&#39;Date&#39;, &#39;integer&#39;, &#39;integer&#39;)) # calculate centre line and control limits cdiff &lt;- within(cdiff, { cl &lt;- mean(infections) lcl &lt;- pmax(0, cl - 3 * sqrt(cl)) # censor lcl at zero ucl &lt;- cl + 3 * sqrt(cl) }) # print the first six rows of data head(cdiff) ## month infections risk_days ucl lcl cl ## 1 2020-01-01 12 19801 11.77776 0 5.041667 ## 2 2020-02-01 7 18674 11.77776 0 5.041667 ## 3 2020-03-01 1 15077 11.77776 0 5.041667 ## 4 2020-04-01 4 12062 11.77776 0 5.041667 ## 5 2020-05-01 4 14005 11.77776 0 5.041667 ## 6 2020-06-01 5 14840 11.77776 0 5.041667 Figure 7.1 shows data plotted with spc() function. We see that there is one data point (#1) above the upper control limit. If we look carefully we also find an unusually long run of 11 data points below the centre line (#14-#24) and that the curve crosses the centre line only 7 times. Thus, in addition to the freak, there is also a shift in data, which is not large enough to break the limits but sustained enough to trigger the runs rules. with(cdiff, { spc(month, infections, cl, lcl, ucl) }) Figure 7.1: C control chart of CDiff infections To help us identify special cause variation we will improve the spc() function. 7.2 Improved spc() function The new, improved spc() function has a few changes: Line 10: Import a function, runs.analysis(), from a separate R script to test for unusually long runs and unusually few crossings. See this function in the Runs Analysis section at the end of this chapter. Lines 19-20: If no cl argument is given, use the median for centre line. Lines 33-34: Create a logical vector identifying data points that lie outside the control limits. Line 37: Test for unusually long runs and unusually few crossings. Line 40: Start with an empty plot. Line 47-49: Format the centre line according to the result of runs analysis. Lines 56-49: Add the data line and points and colour data points outside control limits. spc &lt;- function( x, # x axis values y = NULL, # data values cl = NULL, # centre line lcl = NA, # lower control limit ucl = NA, # upper control limit ... # other parameters passed to the plot() function ) { # load runs analysis function from R script source(&#39;R/runs.analysis.R&#39;) # if y is missing, set y to x and make a sequence for x if (is.null(y)) { y &lt;- x x &lt;- seq_along(y) } # if cl is missing use median of y if (is.null(cl)) cl &lt;- median(y, na.rm = TRUE) # repeat line values to match the length of y if (length(cl) == 1) cl &lt;- rep(cl, length(y)) if (length(lcl) == 1) lcl &lt;- rep(lcl, length(y)) if (length(ucl) == 1) ucl &lt;- rep(ucl, length(y)) # find data points outside control limits (freaks) sigma.signal &lt;- y &lt; lcl | y &gt; ucl sigma.signal[is.na(sigma.signal)] &lt;- FALSE # check for sustained shifts and trends using runs analysis runs.signal &lt;- runs.analysis(y, cl) # make empty plot plot(x, y, type = &#39;n&#39;, ylim = range(y, cl, lcl, ucl, na.rm = TRUE), ...) # add centre line, coloured and dashed if shifts or trends were identified by # the runs analysis lines(x, cl, col = runs.signal + 1, lty = runs.signal + 1) # add control limits lines(x, lcl) lines(x, ucl) # add data line and points, colour freak data points (outside control limits) lines(x, y) points(x, y, pch = 19, col = sigma.signal + 1) } with(cdiff, { spc(month, infections, cl, lcl, ucl) }) Figure 7.2: Improved control chart with visual clues to highlight special cause variation Now it is a lot easier to immediately see if a chart contains special cause variation or not (Figure 7.2). Data points outside the limits are red, and the centre line will turn red and dashed if there are any unusually long runs in data or if the curve crossed the centre line unusually few times. Remember, the chart itself does not tell us what caused the signals. This interpretation of a chart – common or special cause variation – still relies on humans with a deep understanding the process and the data. 7.3 Highlighting special cause variation in short In this chapter we have improved the spc() function to automatically highlight signs of special cause variation using visual clues that help us quickly decide if a process is stable or not. In the next chapter we will improve the spc() function further to automatically aggregate data and calculate control limits. Runs Analysis runs.analysis &lt;- function(y, cl) { # trichotomise data according to position relative to CL # -1 = below, 0 = on, 1 = above runs &lt;- sign(y - cl) # remove NAs and data points on the CL runs &lt;- runs[runs != 0 &amp; !is.na(runs)] # find run lengths run.lengths &lt;- rle(runs)$lengths # find number of useful observations (data points not on CL) n.useful &lt;- sum(run.lengths) # find longest run above or below CL longest.run &lt;- max(run.lengths) # find number of times adjacent data points are on opposite sides of CL n.crossings &lt;- length(run.lengths) - 1 # find upper limit for longest run longest.run.max &lt;- round(log2(n.useful)) + 3 # find lower limit for number of crossing n.crossings.min &lt;- qbinom(0.05, n.useful - 1, 0.5) # return result longest.run &gt; longest.run.max | n.crossings &lt; n.crossings.min } References Anhøj, Jacob. 2015. “Diagnostic Value of Run Chart Analysis: Using Likelihood Ratios to Compare Run Chart Rules on Simulated Data Series.” PLoS ONE. https://doi.org/10.1371/journal.pone.0121349. Anhøj, Jacob, and Anne Vingaard Olesen. 2014. “Run Charts Revisited: A Simulation Study of Run Chart Rules for Detection of Non-Random Variation in Health Care Processes.” PLoS ONE. https://doi.org/10.1371/journal.pone.0113825. Anhøj, Jacob, and Tore Wentzel-Larsen. 2018. “Sense and Sensibility: On the Diagnostic Value of Control Chart Rules for Detection of Shifts in Time Series Data.” BMC Medical Research Methodology. https://doi.org/10.1186/s12874-018-0564-0. "],["r-functions.html", "Chapter 8 One R Function to Rule Them All 8.1 Examples 8.2 TODO 8.3 Further up, further in R function library", " Chapter 8 One R Function to Rule Them All Until now, we have calculated control limits manually before plotting. In this chapter we will introduce a library of functions that work together to automate all the steps involved in constructing SPC charts. We will not go through each of these functions in detail, but we encourage you to study them to get a good grasp of how they work and work together. And we encourage you to improve and adapt them to your own needs. In total there are 17 functions that work together to construct SPC charts. But the user only needs to interact with one of them, spc(). See the R functions library section at the end of this chapter for the source code. The main function, spc() is an improved version of the improved spc() function from Chapter 7. Most importantly, it is no longer necessary to calculate the limits manually. Instead, we provide a chart argument, which should be one of the following: ‘run’, ‘xbar’, ‘s’, ‘i’, ‘mr’, ‘c’, ‘u’, ‘p’. If no chart argument is provided, a run chart will be drawn. Also, we no longer have to use the clumsy $-notation or with() function to access variables inside a data frame. Instead, we may pass the name of the data frame to the data argument. Finally, we do not need to aggregate data for X-bar and S charts in advance. That job is delegated to the spc.aggregate() function, which is also responsible for calling the appropriate functions to calculate the centre line and control limits and perform the runs analysis. After doing its job, spc.aggregate() returns a data frame with all the necessary information needed to construct a plot. This, in turn, is handled by the plot.spc() function. 8.1 Examples Here are examples of each of the Magnificent Eight. See the source code at the end of this chapter for documentation of the input arguments. 8.1.1 Run chart d &lt;- read.csv(&#39;data/blood_pressure.csv&#39;, comment.char = &#39;#&#39;, colClasses = c(date = &#39;Date&#39;)) spc(date, systolic, data = d, main = &#39;Systolic blood pressure&#39;, ylab = &#39;mm Hg&#39;, xlab = &#39;Date&#39;) 8.1.2 I and MR charts for individual measurements # Setup plotting area to hold two plots on top of each other and adjust margins op &lt;- par(mfrow = c(2, 1), mar = c(4, 4, 2, 0) + 0.2) spc(date, systolic, data = d, chart = &#39;i&#39;, main = &#39;Systolic blood pressure&#39;, ylab = &#39;mm Hg&#39;, xlab = NA) spc(date, systolic, data = d, chart = &#39;mr&#39;, main = &#39;Moving range&#39;, ylab = &#39;mm Hg&#39;, xlab = &#39;Date&#39;) Figure 8.1: I and MR charts # Reset plotting area to default par(op) 8.1.3 X-bar and S charts for averages and standard deviations af measurements d &lt;- read.csv(&#39;data/renography_doses.csv&#39;, comment.char = &#39;#&#39;, colClasses = c(date = &#39;Date&#39;, week = &#39;Date&#39;)) op &lt;- par(mfrow = c(2, 1), mar = c(4, 4, 2, 0) + 0.2) spc(week, dose, data = d, chart = &#39;xbar&#39;, main = &#39;Average radiation dose for renography&#39;, ylab = &#39;MBq&#39;, xlab = NA) spc(week, dose, data = d, chart = &#39;s&#39;, main = &#39;Standard deviation&#39;, ylab = &#39;MBq&#39;, xlab = &#39;Week&#39;) Figure 8.2: X-bar and S charts par(op) 8.1.4 C and U charts for counts and rates d &lt;- read.csv(&#39;data/bacteremia.csv&#39;, comment.char = &#39;#&#39;, colClasses = c(month = &#39;Date&#39;)) op &lt;- par(mfrow = c(2, 1), mar = c(4, 4, 2, 0) + 0.2) spc(month, ha_infections, data = d, chart = &#39;c&#39;, main = &#39;Hospital acquired bacteremia&#39;, ylab = &#39;Count&#39;, xlab = NA) spc(month, ha_infections, risk_days, data = d, chart = &#39;u&#39;, multiply = 10000, main = NA, ylab = &#39;Count per 10,000 risk days&#39;, xlab = &#39;Month&#39;) Figure 8.3: C and U charts par(op) 8.1.5 P chart for percentages spc(month, deaths, patients, data = d, multiply = 100, chart = &#39;p&#39;, main = &#39;30-day mortality after bacteremia&#39;, ylab = &#39;%&#39;, xlab = &#39;Month&#39;) Figure 8.4: P chart 8.2 TODO One obvious shortcoming of this function library is that the functions lack error checking. So if you are going to use them in a production environment or for your own SPC package you will need to build that yourself. At the least, you need to automatically check that inputs are of the expected types and that the x, y, and n arguments have the same lengths. TIP: check the stopifnot() function. 8.3 Further up, further in We now have a functioning library of R functions that automate most of the steps involved in the construction of SPC charts. There is still plenty of room for improvement. But this should get you started and – most importantly – give you a deeper understanding of the considerations involved in plotting SPC charts. In the next chapter we will take a quick look at how to use ggplot2() for plotting rather than the plot() function from base R. R function library # Master SPC function ########################################################## # # Constructs an SPC chart. # # Invisibly returns a data frame of class &#39;spc&#39;. # # x: Numeric or date(time) vector of subgroup values to plot along the x # axis. Or, if y is NULL, x values will be used for y coordinates. # y: Numeric vector of measures or counts to # plot on the y axis (numerator). # n: Numeric vector of subgroup sizes (denominator). # data: Data frame containing the variables used in the plot. # multiply: Number to multiply y axis by, e.g. 100 to get percentages rather # than proportions. # chart: Character value indicating the chart type. Possible values are: # &#39;run&#39; (default), &#39;xbar&#39;, &#39;s&#39;, &#39;i&#39;, &#39;mr&#39;, &#39;c&#39;, &#39;u&#39;, and &#39;p&#39;. # plot: Logical, if TRUE (default), plots an SPC chart. # print: Logical, if TRUE, prints a data frame with coordinates. # ...: Other arguments to the plot() function, e.g. main, ylab, xlab. # spc &lt;- function(x, y = NULL, n = 1, data = NULL, multiply = 1, chart = c(&#39;run&#39;, &#39;xbar&#39;, &#39;s&#39;, &#39;i&#39;, &#39;mr&#39;, &#39;c&#39;, &#39;u&#39;, &#39;p&#39;), plot = TRUE, print = FALSE, ...) { # Get data from data frame if data argument is provided, or else get data # from the parent environment. x &lt;- eval(substitute(x), data, parent.frame()) y &lt;- eval(substitute(y), data, parent.frame()) n &lt;- eval(substitute(n), data, parent.frame()) # Get chart argument. chart &lt;- match.arg(chart) # If y argument is missing, use x instead. if (is.null(y)) { y &lt;- x x &lt;- seq_along(y) } # Make sure that the n vector has same length as y. if (length(n) == 1) { n &lt;- rep(n, length(y)) } # Make sure that numerators and denominators are balanced. If one is missing, # the other should be missing too. xna &lt;- !complete.cases(data.frame(y, n)) y[xna] &lt;- NA n[xna] &lt;- NA # Aggregate data by subgroups. df &lt;- spc.aggregate(x, y, n, chart) # Multiply y coordinates if needed. df$y &lt;- df$y * multiply df$cl &lt;- df$cl * multiply df$lcl &lt;- df$lcl * multiply df$ucl &lt;- df$ucl * multiply # Make plot. if (plot) { plot.spc(df, ...) } # Print data frame. if (print) { print(df) } # Make data frame an &#39;spc&#39; object and return invisibly. class(df) &lt;- c(&#39;spc&#39;, class(df)) invisible(df) } # Aggregate function ########################################################### # # Calculates subgroup lengths, sums, means, and standard deviations. Called # from the spc() function. # # Returns a data frame of x, y, n, and centre line and control limits. # # x: Numerical, numbers or dates for the x axis. # y: Numerical, measure or count to plot. # n: Numerical, denominator (if any). # chart: Character, type of chart. # spc.aggregate &lt;- function(x, y, n, chart) { # Get function to calculate centre line and control limits. chart.fun &lt;- get(paste(&#39;spc&#39;, chart, sep = &#39;.&#39;)) # Get function to restore the x variable to its original class after # aggregation. subgrp.fun &lt;- get(paste0(&#39;as.&#39;, class(x))) # Calculate subgroup lengths, sums, means, and standard deviations. df &lt;- data.frame(y, n) df &lt;- split(df, x) df &lt;- lapply(df, function(i) { data.frame(n = sum(i$n, na.rm = TRUE), sum = sum(i$y, na.rm = TRUE), mean = sum(i$y, na.rm = TRUE) / sum(i$n, na.rm = TRUE), sd = sd(i$y, na.rm = TRUE)) }) df &lt;- do.call(rbind, df) df &lt;- data.frame(x = rownames(df), df, chart, row.names = NULL) # Replace any zero length subgroups with NA. df$n[df$n == 0] &lt;- NA # Calculate the weighted subgroup mean. df$ybar &lt;- weighted.mean(df$mean, df$n, na.rm = TRUE) # Restore x variable to its original class. df$x &lt;- subgrp.fun(df$x) # Calculate centre line and control limits. df &lt;- chart.fun(df) # Add runs analysis if (chart == &#39;mr&#39;) { df$runs.signal &lt;- FALSE } else { df$runs.signal &lt;- runs.analysis(df$y, df$cl) } # Find data points outside control limits. df$sigma.signal &lt;- (df$y &lt; df$lcl | df$y &gt; df$ucl) df$sigma.signal[is.na(df$sigma.signal)] &lt;- FALSE # Return data frame. df[c(&#39;x&#39;, &#39;y&#39;, &#39;n&#39;, &#39;lcl&#39;, &#39;cl&#39;, &#39;ucl&#39;, &#39;sigma.signal&#39;, &#39;runs.signal&#39;, &#39;chart&#39;)] } # Plot function ################################################################ # # Draws an SPC chart from data provided by the spc() function. Is usually # called from the spc() function, but may be used as stand-alone for plotting # data frames of class spc created by the spc() function. # # Invisibly returns the data frame # # x: Data frame produced by the spc() function. # ...: Additional arguments for the plot() function, e.g. title and labels. # plot.spc &lt;- function(x, ...) { col1 &lt;- &#39;steelblue&#39; col2 &lt;- &#39;grey30&#39; col3 &lt;- &#39;tomato&#39; # Make room for data and control limits on the x axis. ylim &lt;- range(x$y, x$lcl, x$ucl, na.rm = TRUE) # Draw empty plot. plot(x$x, x$y, type = &#39;n&#39;, bty = &#39;l&#39;, las = 1, ylim = ylim, font.main = 1, ...) # Add lines and points to plot. lines(x$x, x$cl, col = ifelse(x$runs.signal, col3, col2), lty = ifelse(x$runs.signal, &#39;dashed&#39;, &#39;solid&#39;)) lines(x$x, x$lcl, col = col2) lines(x$x, x$ucl, col = col2) lines(x$x, x$y, col = col1, lwd = 2.5) points(x$x, x$y, pch = 19, cex = 0.8, col = ifelse(x$sigma.signal, col3, col1) ) invisible(x) } # Runs analysis function ####################################################### # # Tests time series data for non-random variation in the form of # unusually long runs or unusually few crossings. Called from the # spc.aggregate() function. # # Returns a logical, TRUE if non-random variation is present. # # x: Numeric vector. # cl: Numeric vector of length either one or same length as y. # runs.analysis &lt;- function(y, cl) { # Trichotomise data according to position relative to CL: # -1 = below, 0 = on, 1 = above. runs &lt;- sign(y - cl) # Remove NAs and data points on the centre line. runs &lt;- runs[runs != 0 &amp; !is.na(runs)] # Find run lengths. run.lengths &lt;- rle(runs)$lengths # Find number of useful observations (data points not on centre line). n.useful &lt;- sum(run.lengths) # Find longest run above or below centre line. longest.run &lt;- max(run.lengths) # Find number of crossings. n.crossings &lt;- length(run.lengths) - 1 # Find upper limit for longest run. longest.run.max &lt;- round(log2(n.useful)) + 3 # Find lower limit for number of crossing. n.crossings.min &lt;- qbinom(0.05, n.useful - 1, 0.5) # Return result. longest.run &gt; longest.run.max | n.crossings &lt; n.crossings.min } # Limits functions ############################################################# # # These functions calculate coordinates for the centre line and control limits # of SPC charts. They are not meant to be called directly but are used by the # spc.aggregate() function. # # Return data frames with coordinates for centre line and control limits. # # x: A data frame containing the values to plot. # spc.run &lt;- function(x) { x$y &lt;- x$mean x$cl &lt;- median(x$y, na.rm = TRUE) x$lcl &lt;- NA_real_ x$ucl &lt;- NA_real_ x } spc.i &lt;- function(x) { x$y &lt;- x$mean xbar &lt;- x$ybar amr &lt;- mean(abs(diff(x$y)), na.rm = T) sss &lt;- 2.66 * amr x$cl &lt;- xbar x$lcl &lt;- xbar - sss x$ucl &lt;- xbar + sss x } spc.mr &lt;- function(x) { x$y &lt;- c(NA, abs(diff(x$mean))) amr &lt;- mean(x$y, na.rm = TRUE) x$cl &lt;- amr x$lcl &lt;- NA_real_ x$ucl &lt;- 3.267 * amr x } spc.xbar &lt;- function(x) { x$y &lt;- x$mean a3 &lt;- a3(x$n) xbarbar &lt;- weighted.mean(x$mean, x$n, na.rm = TRUE) sbar &lt;- weighted.mean(x$sd, x$n, na.rm = TRUE) sss &lt;- a3 * sbar x$cl &lt;- xbarbar x$lcl &lt;- xbarbar - sss x$ucl &lt;- xbarbar + sss x } spc.s &lt;- function(x) { x$y &lt;- x$sd sbar &lt;- weighted.mean(x$sd, x$n, na.rm = TRUE) b3 &lt;- b3(x$n) b4 &lt;- b4(x$n) x$cl &lt;- sbar x$lcl &lt;- b3 * sbar x$ucl &lt;- b4 * sbar x } spc.c &lt;- function(x) { x$y &lt;- x$sum cbar &lt;- mean(x$y, na.rm = TRUE) sss &lt;- 3 * sqrt((cbar)) x$cl &lt;- cbar x$lcl &lt;- pmax(0, cbar - sss) x$ucl &lt;- cbar + sss x } spc.u &lt;- function(x) { x$y &lt;- x$mean ubar &lt;- x$ybar sss &lt;- 3 * sqrt((ubar / x$n)) x$cl &lt;- ubar x$lcl &lt;- pmax(0, ubar - sss, na.rm = TRUE) x$ucl &lt;- ubar + sss x } spc.p &lt;- function(x) { x$y &lt;- x$mean pbar &lt;- x$ybar sss &lt;- 3 * sqrt((pbar * (1 - pbar)) / x$n) x$cl &lt;- pbar x$lcl &lt;- pmax(0, pbar - sss) x$ucl &lt;- pmin(1, pbar + sss) x } # Constants functions ########################################################## # # These functions calculate the constants that are used for calculating the # parameters of X-bar and S charts. Called from the spc.xbar() and spc.s() # functions # # Return a number, the constant for that subgroup size # # n: Number of elements in subgroup # a3 &lt;- function(n) { 3 / (c4(n) * sqrt(n)) } b3 &lt;- function(n) { pmax(0, 1 - 3 * c5(n) / c4(n), na.rm = TRUE) } b4 &lt;- function(n) { 1 + 3 * c5(n) / c4(n) } c4 &lt;- function(n) { n[n &lt;= 1] &lt;- NA sqrt(2 / (n - 1)) * exp(lgamma(n / 2) - lgamma((n - 1) / 2)) } c5 &lt;- function(n) { sqrt(1 - c4(n) ^ 2) } "],["ggplot.html", "Chapter 9 SPC Charts with ggplot2", " Chapter 9 SPC Charts with ggplot2 Armed with the battery of functions from Chapter 8 we are able to construct any of the Magnificent Eight using functionality from base R. Furthermore, it is easy to add new types of SPC charts to the library. To achieve this, all we have to do is to write an appropriate spc.*() function to handle the calculations of the centre line and limits and to include the function type in thespc() function’s chart argument. Because we have used a modularised approach and made a separate function for plotting spc objects, plot.spc(), it is also a simple task to use any other plotting method. In this chapter we will build an alternative plot function, which uses ggplot2 as its plotting engine. ggplot2 has many advantages over plotting with base R function. Not because ggplot2 is able to do things that cannot be done with base R, but because it makes some operations a lot easier. For example, with ggplot2 we do not need to worry about scaling the axes to accommodate data that are added to the plot or to make room for axis labels and tick marks. These are all handled gracefully by ggplot2 itself. Also ggplot2 has an extensive theming engine that makes it (relatively) easy to customise the non-data parts of a plot, for example colour palettes, legends, and number/date formats. First we will create an spc object and assign it to a variable name for later use: # Make spc object p &lt;- spc(month, infections, data = cdiff, chart = &#39;c&#39;, plot = FALSE) Note that we suppressed the plotting and assigned the (invisible) output to the variable ‘p’. We can now continue working with p as with any other R object. class(p) ## [1] &quot;spc&quot; &quot;data.frame&quot; head(p) ## x y n lcl cl ucl sigma.signal runs.signal chart ## 1 2020-01-01 12 1 0 5.041667 11.77776 TRUE TRUE c ## 2 2020-02-01 7 1 0 5.041667 11.77776 FALSE TRUE c ## 3 2020-03-01 1 1 0 5.041667 11.77776 FALSE TRUE c ## 4 2020-04-01 4 1 0 5.041667 11.77776 FALSE TRUE c ## 5 2020-05-01 4 1 0 5.041667 11.77776 FALSE TRUE c ## 6 2020-06-01 5 1 0 5.041667 11.77776 FALSE TRUE c plot(p) # not necessary to call spc.plot(), just call the generic plot() function We may now create any number of alternative plotting functions for spc objects. In this example we will create a plotting function that uses ggplot2. # Load ggplot2 library(ggplot2) # Function for plotting spc objects with ggplot() ggspc &lt;- function(p) { # Set colours col1 &lt;- &#39;steelblue&#39; col2 &lt;- &#39;tomato&#39; linecol &lt;- &#39;gray50&#39; dotcol &lt;- ifelse(p$sigma.signal, col2, col1) clcol &lt;- ifelse(p$runs.signal[1], col2, linecol) cltyp &lt;- ifelse(p$runs.signal[1], &#39;dashed&#39;, &#39;solid&#39;) # Plot the dots and draw the lines ggplot(p, aes(x, y)) + geom_line(aes(y = lcl), colour = linecol, na.rm = TRUE) + geom_line(aes(y = ucl), colour = linecol,, na.rm = TRUE) + geom_line(aes(y = cl), na.rm = T, colour = clcol, linetype = cltyp) + geom_line(colour = col1, na.rm = TRUE) + geom_point(colour = dotcol, na.rm = TRUE) } # Plot an spc object ggspc(p) We may also turn the spc object into a ggplot2 object: # Make the spc object into a ggplot2 object p &lt;- ggspc(p) class(p) ## [1] &quot;gg&quot; &quot;ggplot&quot; # Plot with modified theme and custom labels p + theme_light() + theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(colour = &#39;gray&#39;)) + labs(title = &#39;CDiff infections&#39;, y = &#39;Count&#39;, x = &#39;Month&#39;) Now, if we wished, we could replace the plot.spc() function with this new function. We will leave it to you to decide which of the two you like best. The last example in this chapter demonstrates how to create our own custom theme and how to format y axis tick marks as percentages: mytheme &lt;- function() { theme_light() + theme(panel.grid = element_blank(), panel.border = element_blank(), axis.line = element_line(colour = &#39;gray&#39;)) } p &lt;- spc(month, deaths, patients, data = bact, chart = &#39;p&#39;, plot = FALSE) ggspc(p) + mytheme() + scale_y_continuous(labels = scales::label_percent()) + labs(title = &#39;30-day mortality&#39;, y = NULL, x = &#39;Month&#39;) In the long run, though, we might get tired of manually designing our own theme, modifying the plot function, and formatting tick mark labels for every plot. Wouldn’t it be nice to have this done automatically for us? This is exactly what qicharts2 does. qicharts2 is an R package for plotting SPC charts and is the subject of the next chapter. qicharts2 builds on the same principles we have developed so far but has a lot more facilities for customising charts. Most importantly, qicharts2 makes it easy to produce multidimensional plots using ggplot2’s faceting methods. "],["qicharts.html", "Chapter 10 Introducing qicharts2 10.1 A simple run chart 10.2 A simple control chart 10.3 Excluding data points from analysis 10.4 Freezing baseline period 10.5 Splitting chart by period 10.6 Small multiple plots for multivariate data", " Chapter 10 Introducing qicharts2 qicharts2 (Quality Improvement Charts, Anhøj (2024)) is an R package for SPC aimed at healthcare data analysts. It is based on the same principles that we have developed in the previous chapters of this book. It contains functions to construct all of the Magnicent Eight plus a number of specialised charts including pareto charts and control charts for rare events data. To learn everything about qichart2, visit its website: https://anhoej.github.io/qicharts2/. In this chapter we will concentrate on some key facilities that is still missing from the function library we have buld so far: excluding data points from analysis freezing and splitting charts by periods multivariate plots (small multiples) To get started with qicharts2, install it and load it into your working environment: install.packages(&#39;qicharts2&#39;) library(qicharts2) As always, you only need to install a package once, but you need to load it every time you want to use it. Next, you may want to read the vignette: vignette('qicharts2') – or you may want to get started right away. 10.1 A simple run chart The main function of qicharts2 is qic(). It takes the same arguments as the spc() function we built previously plus many more. Check the documentation for a complete list of arguments: ?qic. To reproduce our first run chart from Chapter 5, run: qic(systolic) There are several things to note: Default chart title and axis labels are created automatically. These may, of course, be changed using the title, ylab, and xlab arguments. Data points that fall directly on the centre line are greyed out. These do not count as useful observation in the runs analysis. The centre line value is printed on the chart. 10.2 A simple control chart To produce a control chart, we simply add a chart argument: qic(systolic, chart = &#39;i&#39;) By default qic() uses a grey background area to show the natural process limits. 10.3 Excluding data points from analysis Sometimes it is useful to exclude one or more data points from the calculation of control limits and from the runs analysis. This may be the case when specific data points are known to have been influenced by factors that are not part of the natural process, for example data points that fall outside the control limits. We use the exclude argument to do this: qic(systolic, chart = &#39;i&#39;, exclude = 6) Notice how the values for the centre line and control limits changed a little. Specifically, the control limits became slightly narrower. Excluding data points should be a deliberate decision and not something that is done automatically just because one or more data points are outside the control limits. Exclusion should be based on a thorough understanding of the process and only when the reason(s) for a special cause has been established. Otherwise, the whole idea of SPC as a way of understanding variation and its sources is lost. 10.4 Freezing baseline period When data have been collected for a long enough period of time to establish the centre line and control limits of a stable and predictable process – that is, a process with only common cause variation – it is often useful to “freeze” the limits and use them for future data. In production industry this technique is referred to as phase one and phase two studies. In healthcare freezing is especially useful when we have historical data from before the start of some type of intervention or improvement programme. When plotting future data with the centre line and control limits from a stable baseline period shifts and trends will show up faster than if they were recalculated with every new data point. The cdi dataset comes with qicharts2 and contains monthly counts of infections two years before and one year after the initiation of an improvement programme. Check the documentation for details, ?cdi. qic(month, n, data = cdi, freeze = 24) Figure 10.1: Infections before and after intervention Figure 10.1 shows a run chart of data where the centre line has been established from the baseline period (month 1-24) using the freeze argument. There is a sustained shift in data after the intervention. 10.5 Splitting chart by period When a sustained shift in data has been discovered and the cause is known it is allowable to split the graph by periods. We use the part argument for this (Figure 10.2). qic(month, n, data = cdi, part = 24) Figure 10.2: Splitting using index The split argument takes either the indices of the data points to split after, or we may use a categorical variable naming the time periods in which case the periods will be labelled (Figure 10.3). qic(month, n, data = cdi, part = period) Figure 10.3: Splitting using a period variable As with excluding data points, freezing and splitting should be based on deliberate decisions and thorough understanding of the process. Some SPC applications allow for automatic splitting whenever a shift is detected. We strongly advise against this approach. Freezing and splitting may be useful when: there is a sustained shift in data the reason for the shift is known the shift is in the desired direction the shift is expected to continue If any of these conditions is not met we should rather look for the root cause and – if need be – eliminate it. 10.6 Small multiple plots for multivariate data Process data is all about time. But often data – not the least in healthcare – have more dimensions, which are important to understand in order to interpret data correctly. one unit, many indicators one indicator, many units many units, many indicators Test bullet For example, the hospital_infections dataset, which is also included in the qicharts2 package, contains monthly counts of three types of hospital infections, bacteremia (BAC), C. diff (CDI), and urinary tract infections (UTI) from six hospitals. # show structure of hospitals_infections dataset str(hospital_infections) ## &#39;data.frame&#39;: 432 obs. of 5 variables: ## $ hospital : Factor w/ 6 levels &quot;AHH&quot;,&quot;BFH&quot;,&quot;BOH&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ infection: Factor w/ 3 levels &quot;BAC&quot;,&quot;CDI&quot;,&quot;UTI&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ month : Date, format: &quot;2015-01-01&quot; &quot;2015-02-01&quot; ... ## $ n : int 17 18 17 10 13 14 9 15 16 10 ... ## $ days : num 17234 15308 16884 15464 15789 ... In this example data have two extra dimensions, infections and hospitals. A most useful way of visualising multivariate data is to plot data from different “spaces” alongside each other. qic(month, n, days, data = subset(hospital_infections, infection == &#39;UTI&#39;), chart = &#39;u&#39;, multiply = 10000) Figure 10.4: Small multiple plot of urinary tract infection from six hospital qic(month, n, days, data = subset(hospital_infections, infection == &#39;UTI&#39;), chart = &#39;u&#39;, multiply = 10000, facets = ~hospital) qic(month, n, days, data = subset(hospital_infections, hospital == &#39;NOH&#39;), chart = &#39;u&#39;, multiply = 10000, facets = ~infection) qic(month, n, days, data = subset(hospital_infections, hospital == &#39;NOH&#39;), chart = &#39;u&#39;, multiply = 10000, facets = ~infection, scales = &#39;free_y&#39;, ncol = 1) qic(month, n, days, data = hospital_infections, chart = &#39;u&#39;, multiply = 10000, facets = infection ~ hospital, scales = &#39;free_y&#39;, title = &#39;Hospital infections&#39;, ylab = &#39;Count per 10,000 risk days&#39;, xlab = &#39;Month&#39;) References ———. 2024. Qicharts2: Quality Improvement Charts. https://CRAN.R-project.org/package=qicharts2. "],["case1.html", "Chapter 11 Case 1", " Chapter 11 Case 1 "],["case2.html", "Chapter 12 Case 2", " Chapter 12 Case 2 "],["case3.html", "Chapter 13 Case 3", " Chapter 13 Case 3 "],["data-sets.html", "Data Sets 1 Bacteremia 2 Blood pressure 3 Clostridioides difficile infections 4 Ceasearian section delay 5 Emergency admission mortality 6 On-time CT 7 Radiation doses 8 Robson group 1 births", " Data Sets 1 Bacteremia Hospital acquired and all cause bacteremias and 30 days mortality File: bacteremia.csv Variables: month (date): month of infection ha_infections (numeric): number of hospital acquired infections risk_days (numeric): number of patient days without infection deaths (numeric): 30-day mortality after all-cause infection patients (numeric): number of patients with all-cause infection 2 Blood pressure Daily measurements of blood pressure and resting pulse. File: blood_pressure.csv Variables: date (date): date of measurement systolic (numeric): systolic blood pressure (mm Hg) diastolic (numeric): diastolic blood pressure (mm Hg) pulse (numeric): resting pulse (beats per minute) 3 Clostridioides difficile infections Hospital acquired C. diff. infections File: cdiff.csv Variables: month (date): first day of month cases (numeric): number of cases risk_days (numeric): number of patient days without infection 4 Ceasearian section delay Time to grade 2 C-section File: csection_delay.csv Variables: datetime (datetime): date and time of delivery month (date): first day of month delay (numeric): time in minutes between decision and delivery 5 Emergency admission mortality 7-day mortality after emergency admission File: emergency_admission.csv Variables: month (date): first day of month deaths (numeric): number of deaths within 7 days after emergency admission admissions (numeric): number of emergency admissions 6 On-time CT Patients with acute abdomen CT scanned within 3 hours after arrival File: ontime_ct.csv Variables: month (date): first day of month ct_on_time (numeric): number of patients scanned within 3 hours cases (numeric): number of patients with acute abdomen 7 Radiation doses Radiation doses used for renography File: renography_doses.csv Variables: date (date): date of renography week (date): first day of week dose (numeric): radiation dose in megabequerel 8 Robson group 1 births Outcomes and complications of Robson group 1 births: first time pregnancy, single baby, head first, gestational age at least 37 weeks. File: robson1_births.csv Variables: datetime (datetime): data and time of birth biweek (date): first day of biweekly period csect (logical): delivery by C-section cup (logical): delivery by vacuum extraction length (numeric): baby length in cm weight (numeric): baby weight in kg apgar (numeric): apgar score at 5 minutes ph (numeric): arterial umbilical chord pH asphyxia (logical): ph &lt; 7 or missing ph and apgar &lt; 7 "],["references.html", "References", " References Anhøj, Jacob. 2015. “Diagnostic Value of Run Chart Analysis: Using Likelihood Ratios to Compare Run Chart Rules on Simulated Data Series.” PLoS ONE. https://doi.org/10.1371/journal.pone.0121349. ———. 2024. Qicharts2: Quality Improvement Charts. https://CRAN.R-project.org/package=qicharts2. Anhøj, Jacob, and Anne Vingaard Olesen. 2014. “Run Charts Revisited: A Simulation Study of Run Chart Rules for Detection of Non-Random Variation in Health Care Processes.” PLoS ONE. https://doi.org/10.1371/journal.pone.0113825. Anhøj, Jacob, and Tore Wentzel-Larsen. 2018. “Sense and Sensibility: On the Diagnostic Value of Control Chart Rules for Detection of Shifts in Time Series Data.” BMC Medical Research Methodology. https://doi.org/10.1186/s12874-018-0564-0. Mohammed, M A. 2024. Statistical Process Control. Elements of Improving Quality and Safety in Healthcare. Cambridge University Press. https://www.cambridge.org/core/elements/statistical-process-control/60B6025BF62017A9A203960A9E223C10. Mohammed, M A, P Worthington, and W H Woodall. 2008. “Plotting Basic Control Charts: Tutorial Notes for Healthcare Practitioners.” BMJ Qual Saf 17 (2): 137–45. https://doi.org/10.1136/qshc.2004.012047. Thor, Johan, Jonas Lundberg, Jakob Ask, Jesper Olsson, Cheryl Carli, Karin Pukk Härenstam, and Mats Brommels. 2007. “Application of Statistical Process Control in Healthcare Improvement: Systematic Review.” BMJ Qual Saf 16: 387–99. https://doi.org/10.1136/qshc.2006.022194. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
