[["limits.html", "Chapter 7 Calculating Control Limits 7.1 Introducing the spc() function 7.2 Formulas for calculation of control limits 7.3 Count data 7.4 Measurement data 7.5 Control limits in short Control chart constants", " Chapter 7 Calculating Control Limits In the previous chapter we established the basis for constructing SPC charts with R. In this chapter we continue with different types of control charts and how to construct their control limits. 7.1 Introducing the spc() function To avoid repeating ourselves, let’s begin by creating a function to automate the plotting for us. spc &lt;- function( x, # x axis values y = NULL, # data values cl = NA, # centre line lcl = NA, # lower control limit ucl = NA, # upper control limit ... # other parameters passed to the plot() function ) { # if y is missing, set y to x and make a sequence for x if (is.null(y)) { y &lt;- x x &lt;- seq_along(y) } # repeat line values to match the length of y if (length(cl) == 1) cl &lt;- rep(cl, length(y)) if (length(lcl) == 1) lcl &lt;- rep(lcl, length(y)) if (length(ucl) == 1) ucl &lt;- rep(ucl, length(y)) # plot the dots and draw the lines plot(x, y, type = &#39;o&#39;, ylim = range(y, lcl, ucl, na.rm = TRUE), ...) lines(x, cl) lines(x, lcl) lines(x, ucl) } The spc() function takes five arguments of which only the first, x, is mandatory. If only x is provided, a simple line chart will be drawn from the x values. If y is also provided, x values will be used for the x axis. The line arguments (cl, lcl, ucl) are used (if provided) for the centre line and control limits respectively. Line arguments may be given as either single values or vectors of the same length as x. In addition, one may provide additional arguments for the plot() function, e.g. main, xlab, and ylab for title and axis labels. Let’s test it using some random numbers from a normal distribution (more on testing with random numbers in Chapter XX): # initiate random number generator to make results reproducible set.seed(9) # create x and y data coordinates and values for centre line and control limits y &lt;- rnorm(24) # y coordinates x &lt;- seq_along(y) # x coordinates cl &lt;- 0 # centre line = 0 lcl &lt;- -3 # lower control limit = -3 ucl &lt;- 3 # upper control limit = 3 # plot the dots and draw the lines spc(x, y, cl, lcl, ucl) Figure 7.1: Control chart from random normal numbers With this function we are now able to construct all kinds of control charts. All we need to know is how to calculate the centre line and the control limits. 7.2 Formulas for calculation of control limits The formulas for calculation control limits for the most common control charts are provided in Table 7.1. Don’t be alarmed by the number of strange symbols, we will dissect the formulas one by one as we move along. Table 7.1: Formulas for calculating control limits Subgroups Chart type Control limits Assumed distribution Count data Counts C \\(\\bar{c}\\pm3\\sqrt{\\bar{c}}\\) Poisson Rates U \\(\\bar{u}\\pm3\\sqrt{\\frac{\\bar{u}}{n_{i}}}\\) Poisson Proportions P \\(\\bar{p}\\pm3\\sqrt{\\frac{\\bar{p}(1-\\bar{p})}{n_{i}}}\\) Binomial Measurement data Individual measurements I \\(\\bar{x}\\pm2.66\\overline{MR}\\) Normal Moving ranges of individual measurements MR \\(3.267\\overline{MR}\\) Normal Averrages of 2 or more measurements X-bar \\(\\bar{\\bar{x}}\\pm A_{3}\\bar{s}\\) Normal Standard deviations of 2 or more measurements S \\(B_{3}\\bar{s};\\ B_{4}\\bar{s}\\) Normal Generally, data come in two flavours: count data and measurement data. Counts are positive integers that represent counts of events or cases, for example surgical complications, healthy babies, or patient falls. Measurements are data that are measured on continuous scales and may have decimals, for example blood pressure, height and weight, or waiting times. 7.3 Count data There are several types of count data depending on the type of counts involved. In this chapter we will limit ourselves to events and cases. Events are phenomena that happens from time to time and are usually rare and randomly distributed in time and space. Events can for example be the number of cancer cells found in a microscopy slide, the number of patient falls in a month, or the number of shooting stars observed in the night sky.Events are presented as raw counts or rates and are often modelled by the poisson distribution. Cases represent whole units that either possess or do not posses a certain property. Cases can for example be surgical procedures that had one or more complications, patients who died (or survived), or procedures that completed according to a standard. Cases are presented as proportions or percentages and are often modelled by the binomial distribution. For count charts in this chapter we will use the bacteremia data set: # read data from file bact &lt;- read.csv(&#39;data/bacteremia.csv&#39;, comment.char = &#39;#&#39;, colClasses = c( &#39;Date&#39;, &#39;integer&#39;, &#39;integer&#39;, &#39;integer&#39;, &#39;integer&#39; )) # print the first six rows head(bact) ## month ha_infections risk_days deaths patients ## 1 2017-01-01 24 32421 23 100 ## 2 2017-02-01 29 29349 22 105 ## 3 2017-03-01 26 32981 13 99 ## 4 2017-04-01 16 29588 14 85 ## 5 2017-05-01 28 30856 17 98 ## 6 2017-06-01 16 30544 15 85 The variables are: month (date): month of infection ha_infections (numeric): number of hospital acquired infections risk_days (numeric): number of patient days without infection deaths (numeric): number of patients who died within 30-day after all-cause (hospital or community acquired) infection patients (numeric): number of patients with all-cause infection We think of infections as events and patients as cases. The difference may seem insignificant, but consider infections as events that can occur more than once to a patient, while a patient is either infected or not infected and either dead or alive. 7.3.1 C chart The C charts (C for counts) is the simplest of all control charts and the easiest to calculate. The process standard deviation is simply estimated as the square root of the process mean. C charts are appropriate when counting events from (nearly) equally big chunks of time or space. Figure 7.2 shows a C chart of the monthly number of hospital acquired bacteremias. with(bact, { cl &lt;- mean(ha_infections) lcl &lt;- cl - 3 * sqrt(cl) ucl &lt;- cl + 3 * sqrt(cl) # print the limits cat(&#39;UCL =&#39;, ucl, &#39;\\n&#39;) cat(&#39;CL =&#39;, cl, &#39;\\n&#39;) cat(&#39;LCL = &#39;, lcl, &#39;\\n&#39;) # plot the chart spc(month, ha_infections, cl, lcl, ucl, ylab = &#39;Infections&#39;, xlab = &#39;Month&#39;) }) ## UCL = 36.94952 ## CL = 22.66667 ## LCL = 8.38381 Figure 7.2: C control chart of monthly numbers of hospital acquired bacteremias The average number of cases is 22.7 per month and all data points are within the control limits ranging from 8.4 to 36.9. 7.3.2 U chart U charts are useful when events are counted over chunks of time or space that are not equally sized resulting in “unequal area of opportunity” (hence the U). In our case we might want to adjust for for the number of patient days that may vary depending on the time of year or between organisational units. The U chart adjust for this by presenting rates rather than raw counts. As mentioned before, events are often rare in comparison to their areas of opportunity. So to avoid very small numbers on the y-axis it may be useful to multiply the y-axis by some factor before plotting. In Figure 7.3 we multiply by 10,000 to display infections per 10,000 risk days rather than per day. with(bact, { y &lt;- ha_infections / risk_days # rates to plot cl &lt;- sum(ha_infections) / sum(risk_days) # overall mean rate, centre line s &lt;- sqrt(cl / risk_days) # standard deviation lcl &lt;- cl - 3 * s # lower control limit ucl &lt;- cl + 3 * s # upper control limit # multiply y axis to present infections per 10,000 risk days multiply &lt;- 10000 y &lt;- y * multiply cl &lt;- cl * multiply lcl &lt;- lcl * multiply ucl &lt;- ucl * multiply spc(month, y, cl, lcl, ucl, ylab = &#39;Infections per 10,000 risk days&#39;, xlab = &#39;Month&#39;) }) Figure 7.3: U chart of monthly number of infections per 10,000 risk days The U chart shows that on average we have 7.5 infections per 10,000 risk days, and that all data points are between the control limits ranging from about 3.5 to 12. We see that the control limits vary depending on the number of risk days, the denominator, for each data point. Large denominator \\(\\Rightarrow\\) narrow limits; small denominator \\(\\Rightarrow\\) wide limits. In cases like this where the denominator – the area of opportunity – only varies little between subgroups, the U charts adds little compared to the C chart. However, when one needs to compare events from organisational units of different size or over time periods where the area of opportunity varies significantly, it may be useful to compare the rates rather than the raw counts. 7.3.3 P chart P charts are for proportions (or percentages). Figure @ref(fig:limits-p shows the monthly proportion of patients with bacteremia who died within 30 days. In contrast to event rates, where the numerator (event counts) and the denominator (area of opportunity) are different things, proportions always shows the number of cases in relation to the total number of cases and non-cases. This means that proportions always are dimensionless. Percentages are simply proportions multiplied by 100. with(bact, { y &lt;- deaths / patients cl &lt;- sum(deaths) / sum(patients) s &lt;- sqrt((cl * (1 - cl) / patients)) lcl &lt;- cl - 3 * s # lower control limit ucl &lt;- cl + 3 * s # upper control limit multiply &lt;- 100 y &lt;- y * multiply cl &lt;- cl * multiply lcl &lt;- lcl * multiply ucl &lt;- ucl * multiply spc(month, y, cl, lcl, ucl, ylab = &#39;%&#39;, xlab = &#39;Month&#39;) }) Figure 7.4: P chart of monthly 30-day mortality rates On average the mortality is 21%. All data points are within the control limits and there are no unusually long runs or unusually few crossings. The the process appears stable and predictable. 7.4 Measurement data For this section we will use a data set on response times for grade 2 caesarean sections, that is, the time (in minutes) it took from the decision to perform a C-section to the baby was delivered. The goal is to keep the response times below 30 minutes. The csect data frame contains the date and time, the month, and the number of minutes from decision to delivery for 208 grade 2 section over a two-year period. # read raw data csect &lt;- read.csv(&#39;data/csection_delay.csv&#39;, comment.char = &#39;#&#39;, colClasses = c(&#39;POSIXct&#39;, &#39;Date&#39;, &#39;integer&#39;)) # show the first 6 rows head(csect) ## datetime month delay ## 1 2016-01-06 03:55:40 2016-01-01 22 ## 2 2016-01-06 20:52:34 2016-01-01 22 ## 3 2016-01-07 02:50:43 2016-01-01 29 ## 4 2016-01-07 22:32:27 2016-01-01 28 ## 5 2016-01-09 14:56:09 2016-01-01 22 ## 6 2016-01-09 21:21:24 2016-01-01 20 7.4.1 I chart (aka X chart) The “I” in I chart stand for “individuals” because it plots individual values from subgroups of size 1. I charts are also often referred to as X charts. I charts are useful when measurements come from individual units, for example waiting times or blood pressure measurements for individual patients. As we will see later, I charts are in fact useful for all kinds of data because they base their estimations on the actual variation that is present in data rather than theoretical parameters from assumed distributions. For this reason, the I chart is considered the Swiss army knife of SPC. When subgroups consist of single values we use the pairwise absolute difference between data points, the average moving range (\\(\\overline{MR}\\)), as an estimate of the common cause variation. By dividing this value with 1.128 we get an estimate of the process standard deviation. Alternatively, one may multiply \\(\\overline{MR}\\) by 3 / 1.128 = 2.66 to get 3 \\(SD\\)s. Let’s have a look at individual delay times for the latest 60 C-sections (Figure 7.5). with(tail(csect, 60), { xbar &lt;- mean(delay) # mean value, centre line mr &lt;- abs(diff(delay)) # moving ranges amr &lt;- mean(mr) # average moving range s &lt;- amr / 1.128 # process standard deviation spc(delay, cl = xbar, lcl = xbar - 3 * s, ucl = xbar + 3 * s) }) Figure 7.5: I-chart On average, the delay time for these cases is 24 minutes. The control limits tell us that we should expect future delays to be in the range of 11 to 37 minutes. Two data points are outside the control limits (#3 and #31) suggesting that these case were special and that it might be useful to have a closer look to find out what went well with case #3 and not so well with case #31. 7.4.2 MR chart The MR chart plots the moving ranges of individual values. It is a companion to the I chart. Since moving ranges cannot be negative, the MR chart has no lower control limit. with(tail(csect, 60), { mr &lt;- c(NA, abs(diff(delay))) amr &lt;- mean(mr, na.rm = TRUE) spc(mr, cl = amr, ucl = 3.267 * amr) }) Figure 7.6: MR-chart Note that there is one less moving range than individual values. To “synchronise” the charts, we insert an NA value at the beginning of the MR-chart. We may plot the two charts together (Figure 7.7): with(tail(csect, 60), { xbar &lt;- mean(delay) mr &lt;- c(NA, abs(diff(delay))) amr &lt;- mean(mr, na.rm = TRUE) op &lt;- par(mfrow = c(2, 1), # setting up plotting area mar = c(5, 5, 2, 1)) spc(delay, cl = xbar, lcl = xbar - 2.66 * amr, ucl = xbar + 2.66 * amr, main = &#39;I-chart&#39;, ylab = &#39;Delay (minutes)&#39;, xlab = &#39;&#39;) spc(mr, cl = amr, ucl = 3.267 * amr, main = &#39;MR-chart&#39;, ylab = &#39;Moving range (minutes)&#39;, xlab = &#39;C-section #&#39;) par(op) # restoring plotting area }) Figure 7.7: I- and MR-charts The MR-chart finds five data points outside the limits. These coincide with the special causes found by the I chart and supports our conclusion that these deliveries were special. Note that each data point on the I chart (except the first and last ones) produces two moving ranges on the MR chart. Also note that delivery #4, which is very close to, but not above, the upper control limit in the I chart actually produced a signal in the MR chart. One may speculate if the very short delay for delivery #3 and the long delay for delivery #4 are linked in some way. 7.4.3 X-bar chart The X-bar chart is appropriate when the subgroups consist of samples of two or more measurements. To plot a control chart of the monthly average delays, we must first aggregate data to find the mean and the standard deviation of delay times and the number of sections per month. # aggregate data by month csect.agg &lt;- aggregate(delay ~ month, csect, function(x) c(mean = mean(x), sd = sd(x), n = length(x))) # make data into a nice data frame csect.agg &lt;- do.call(data.frame, csect.agg) # print the first 6 rows head(csect.agg) ## month delay.mean delay.sd delay.n ## 1 2016-01-01 23.85714 3.387653 7 ## 2 2016-02-01 24.45455 6.137811 11 ## 3 2016-03-01 22.45455 6.638729 11 ## 4 2016-04-01 22.66667 3.041381 9 ## 5 2016-05-01 22.50000 3.891382 8 ## 6 2016-06-01 22.00000 6.204837 5 Next, we calculate the centre line and the control limits using the formula in Table 7.1 where \\(\\bar{\\bar{x}}\\) (pronounced x bar bar) is the weighted mean of the subgroup means, \\(\\bar{s}\\) (s bar) is the weighted mean of the subgroup standard deviations, and \\(A_3\\) is a constant that depends on the subgroup size. See the section on chart constants at the end of this chapter for the R code involved in calculating \\(A_3\\) and other constants for control chart construction. With the aggregated data we are now able to construct the X-bar chart (Figure 7.8). with(csect.agg, { xbarbar &lt;- weighted.mean(delay.mean, delay.n) # centre line sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled standard deviation a3 &lt;- a3(delay.n) # A3 constant spc(x = month, y = delay.mean, cl = xbarbar, lcl = xbarbar - a3 * sbar, ucl = xbarbar + a3 * sbar) }) Figure 7.8: X bar chart Figure 7.8 shows the average delay time per month. On average the delay time is 23 minutes (= centre line) and all data points fall between the control limits suggesting that the process is stable and predictable. As with U and P charts the control limits vary from month to month reflecting the varying subgroup sizes – small subgroups \\(\\Rightarrow\\) wide limits; large subgroups \\(\\Rightarrow\\) narrow limits. Be careful not to fall for the temptation to conclude that since no months are above the target of 30 minutes, all is well. The 30-minute target concerns the delay time of individual sections, not the averages. Even if the averages are well below the target, individuals may be above, which we already noticed from the I chart above. 7.4.4 S chart The S chart is usually plotted alongside the X-bar chart and shows the within subgroup variation. It is useful for detecting changes in the spread of data over time. To calculate the centre and control limits for the S chart we need to know the pooled standard deviation, \\(\\bar{S}\\) (same as for the X-bar chart), and the two constants \\(B_3\\) and \\(B_4\\) From Table 7.1. with(csect.agg, { sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled SD, centre line b3 &lt;- b3(delay.n) # B3 constant b4 &lt;- b4(delay.n) # B4 constant spc(x = month, y = delay.sd, cl = sbar, lcl = b3 * sbar, ucl = b4 * sbar) }) Figure 7.9: S chart Figure 7.9 shows the average standard deviation of delay times per month. On average the standard deviation is 4.7 minutes (= centre line) and all data points fall between the control limits suggesting that the process is stable and predictable. We may plot the X-bar and S charts together (Figure 7.10): with(csect.agg, { xbarbar &lt;- weighted.mean(delay.mean, delay.n) # pooled average sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled standard deviation a3 &lt;- a3(delay.n) # A3 constant b3 &lt;- b3(delay.n) # B3 constant b4 &lt;- b4(delay.n) # B4 constant op &lt;- par(mfrow = c(2, 1), mar = c(3, 5, 2, 1)) spc(month, delay.mean, cl = xbarbar, lcl = xbarbar - a3 * sbar, ucl = xbarbar + a3 * sbar, main = &#39;X-bar Chart&#39;, xlab = &#39;&#39;) spc(month, delay.sd, cl = sbar, lcl = b3 * sbar, ucl = b4 * sbar, main = &#39;S chart&#39;, xlab = &#39;&#39;) par(op) }) Figure 7.10: X-bar and S charts 7.5 Control limits in short Control limits attempt to estimate the borders of the natural common cause process variation. They are placed 3 standard deviations above and below the centre line, which is usually the (weighted) mean of the subgroup means. The procedure for calculating control limits depends on the type of data involved, but the interpretation of charts are the same regardless of data type. In the next chapter we will improve our plots by adding visual clues to highlight signs of non-random variation. Control chart constants a3 &lt;- function(n) { 3 / (c4(n) * sqrt(n)) } b3 &lt;- function(n) { pmax(0, 1 - 3 * c5(n) / c4(n)) } b4 &lt;- function(n) { 1 + 3 * c5(n) / c4(n) } c4 &lt;- function(n) { n[n &lt;= 1] &lt;- NA sqrt(2 / (n - 1)) * exp(lgamma(n / 2) - lgamma((n - 1) / 2)) } c5 &lt;- function(n) { sqrt(1 - c4(n)^2) } "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
