[["index.html", "Mastering Statistical Process Control charts in Healthcare A practical, hands-on, step-by-step guide for data scientists using R Synopsis", " Mastering Statistical Process Control charts in Healthcare A practical, hands-on, step-by-step guide for data scientists using R Jacob Anhøj &amp; Mohammed Amin Mohammed 2024-07-05 Synopsis This is the online version of Mastering Statistical Process Control Charts in Healthcare, a book currently under early development. INTRODUCTION   What is SPC?   About the Book PART 1: Understanding Variation Understanding Variation Given two numbers, one will be bigger rolling dies and flipping coins when you throw a die and get a seven Populations and processes (enumerative vs analytical studies) Patterns of non-random variation in time series data and their interpretation freaks shifts trends waves sawtooths(teeth?) repeated patterns What is SPC? History A modern definition SPC and continuous quality improvement – neither can live while the other dies The Case for SPC in Healthcare Introducing SPC Charts Anatomy of SPC charts What SPC charts do and don’t do Testing for Non-random Variation in SPC Charts Tests based on sigma limits the 3-sigma test the Western Electric rules Runs analysis – tests based on the distribution of data points around the centre line identifying unusually long runs identifying unusually few crossings look mom, no control limits! – using runs analysis as stand-alone rules with run charts Rules to avoid the trend rule too short longest runs Responding to SPC Signals The voice of the customer vs the voice of the process Conciliating the two voices – or, from RAGs to RICHes (RAG = Red, Amber, Green; RICH = Respond, Investigate, Celebrate’n Hold) PART 2: Constructing SPC Charts with R Your First SPC Charts with Base R A run chart from random normal data Adding control limits to produce a control chart Calculating Control Limits for “The Magnificent Seven” Xbar chart S chart I chart (aka X chart) MR chart C chart U chart P chart Highlighting Data Points Outside Control Limits (freaks) Highlighting Shifts, Trends, and Waves Found by Runs Analysis One R Function to Rule Them All Your First SPC Chart with ggplot2 Introducing qicharts2 – an R Package Tailored Specifically for SPC in Healthcare PART 3: Case Studies Monitoring Infection Rates (C. diff.) Patient Harm Reducing Patient Wait Times Coronary Artery Bypass Grafts Reducing Response Times for Cecarian Section Faceting Plots for Multivariate Data (Hospital Infections) PART 4: Advanced SPC Techniques Phase One and Phase Two Applications of SPC When to Split SPC Charts When to Transform Data Before Plotting Funnel Plots for Categorical Data Pareto Charts for Ranking Problems Prime Charts for Count Data with Very Large Sample Sizes The Standardised Control Chart The Normalised I Chart Charts for Rare Events T Charts for Time Between Events G Charts for Opportunities Between Cases Bernoulli CUSUM charts for binary data CUSUM and EWMA Charts Multi Variate Charts The Control Charts vs Run Charts Debate Runs Analysis Revisited: The Joint Distribution of Longest Run and Number of Crossings Improving runs analysis using the best box and cut box approaches PART 5: Conclusion and Final Thoughts Summary of Key Points Future Directions Final Thoughts PART 9¾: Nerd Stuff Introducing R A Basic Statistical Concepts Counts and measures Distributions Centre mean median Spread range percentiles standard deviation Shape symmetric skewed Principles for Data Visualisation histograms and boxplots for measurement data distributions barplots for count data distributions scatter plots for relations between measurement data point-and-line plots for time series data Data Preparation with R Sources of healthcare data Indicator types: measurements, counts, rates, proportions Getting data in shape for visualisation with R APPENDICES Resources and Further Readings Recommended books Web sites, forums, and communities Other R packages SPC (qcc, spc, …) Best Practices and Tips for SPC Implementation Formulas and R Functions for Calculating Control Limits Table of Parameters for the Xbar and S Charts Table of Critical Values for Longest Runs and Number of Crossings Glossary of Terms "],["intro.html", "Introduction", " Introduction This book is about the practical application of statistical process control (SPC) methodology in healthcare. While SPC is often thought of simply as a set of tools – the control chart being its most prominent member – we prefer to think of SPC more broadly as the application of statistical thinking to continuous quality improvement. Statistical Process Control is not about statistics, it is not about “process-hyphen-control”, and it is not about conformance to specifications. […] It is about the continual improvement of processes and outcomes. And it is, first and foremost, a way of thinking with some tools attached. — Don Wheeler (Wheeler 2000, p 152) Many excellent books have been written about the thinking and the theory behind SPC (e.g. Wheeler 2000; Montgomery 2009; Mohammed 2024), but very little has been written about how to actually construct SPC charts – especially using software. Consequently, this book is mostly about the tools, in particular run and control charts, and how to construct and interpret them using modern software. For example, a control chart like the one in Figure (0.1) may be produced using a single line of code in R (R Core Team 2024), which is often referred to as the lingua franca of statistical computing and visualisation. And since SPC is all about statistical computing and visualisation, R is our software of choice. Figure 0.1: I control chart produced with the R package qicharts2 SPC charts are powerful, intuitive and versatile. First developed in the 1920’s in production industry, the use of SPC in healthcare has grown spectacularly. For instance, the number of papers in the pubmed database went from only 14 in 1971 to 3252 in 2023 [SEARCH CRITERIA?]. However, a review of SPC in healthcare noted that “it’s easy and not so easy” [CITATION]. The “easy part” is that SPC charts are usually intuitive and easily understood. The “not so easy part” involves the production of these charts. This book aims to help people who want to produce SPC charts in practice using modern software. We refer to such people as data scientist whilst recognising that they may be analysts, practitioners, managers, teachers, students, researchers, patients, etc. So what is different about this book? This book stands out by being a specialized, practical, and modern guide specifically tailored for data scientists in the healthcare sector. Its focus on real-world application, combined with comprehensive coverage of SPC techniques and the use of contemporary tools, makes it a unique and valuable resource. This book is a how to book. Target Audience: This book is specifically tailored for data scientists who want to learn how to produce SPC charts by the R programming language. Use of R: Our choice of software is R - which is popular, free, and open source. One major advantage of R (and programming languages in general) is that all the steps and procedures involved in analysing data and constructing graphs and other output are documented in readable form in the source code thus making analyses transparent and reproducible, which is rarely the case with “point-and-click” software. Another advantage is that R has built-in functions for producing publication ready graphics of very high quality. By being pro-R we are not anti any other software, and the principles involved in creating SPC chart with R demonstrated in this book may be ported to other software solutions. Healthcare Focus: While there are many general books on SPC, this book’s focus is on practical applications in healthcare, making it particularly relevant for those working in this field. It addresses the unique challenges and requirements of applying SPC methods in healthcare settings, such as patient safety, clinical outcomes, and operational efficiency as described in an accompanying book (Mohammed 2024). Practical Guide: The book is a practical step-by-step guide, using real-world examples and case studies that enable readers to produce and use SPC charts with confidence. This hands-on approach helps bridge the gap between theory and practice. Comprehensive Coverage: The book covers a comprehensive range of topics within SPC, from basic concepts to advanced techniques. This ensures that both beginners and experienced data scientists can find valuable insights and techniques that can be applied to their work in healthcare. Resources: The book comes with additional resources such as R scripts, datasets, and access to an online GitHub repository. Prerequisites: We assume no prior knowledge of SPC, but a basic familiarity with R is required to understand the processes and algorithms for constructing SPC charts. Mathematical details are relegated to appendices. We hope you find the book useful and would appreciate your feedback on how it can be continually improved upon. JA: jacob@anhoej.net MAM: m.a.mohammed5@bradford.ac.uk References Mohammed, M A. 2024. Statistical Process Control. Elements of Improving Quality and Safety in Healthcare. Cambridge University Press. Montgomery, Douglas C. 2009. Statistical Quality Control: A Modern Introduction, Sixth Ed. John Wiley &amp; Sons. R Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/. Wheeler, Donald J. 2000. Understanding Variation – the Key to Managing Chaos. Knoxville, Tennessee: SPC Press. "],["variation.html", "Chapter 1 Understanding Variation", " Chapter 1 Understanding Variation "],["first-chart.html", "Chapter 2 Your First SPC Charts With Base R 2.1 A run chart from random normal data 2.2 Adding control limits to produce a control chart 2.3 That’s all, Folks!", " Chapter 2 Your First SPC Charts With Base R From part 1 of this book we have a good grasp of what SPC is and how SPC charts work. In this chapter we will start constructing SPC chart. We begin using only functions from base R. Later we will move to ggplot2and qicharts2. In essence, an SPC charts is a (point-and-)line plot of data over time with a horizontal line to represent the data centre and – in case of a control chart – two lines to represent the estimated upper and lower bounds of the natural variation in data. To construct an SPC chart, all we need are four vectors with the y-coordinates of the data points and lines. Let’s start by creating some artificial data to work with. We draw 24 random numbers from a normal distribution with mean = 0 and standard deviation (sd) = 1. # Initialise random number generator to make results reproducible set.seed(27) # Create a vector of 24 random numbers from a normal distribution y &lt;- rnorm(24, mean = 0, sd = 1) 2.1 A run chart from random normal data First we plot a simple run chart without any helper lines (Figure 2.1): # Make point-and-line plot plot(y, type = &#39;o&#39;) Figure 2.1: Simple run chart (As a side note, this reminds me (JA) of a manager, who once said to me: “You make such beautiful graphs, but can’t you stop them from going up and down all the time.” 😁) Then we add the the centre line to the plot. Since we know the parameters of the distribution data come from, we can use the theoretical population mean/median (= 0) as the centre line. With the centre line in place, we can apply runs analysis to identify unnatural patterns suggesting sustained shifts or trends in data over time (Figure 2.2): # Create y-coordinates for the centre line cl &lt;- rep(0, length(y)) # Plot data and add centre line plot(y, type = &#39;o&#39;) lines(cl) Figure 2.2: Run chart with centre line We find that the longest runs (there are two of them, 6:10 and 15:19) have 5 data points and that the curve crosses the centre line 9 times. With 24 data points and using the runs rules proposed previously, the upper limit for longest run is 8 as is (coincidentally) the lower limit for number of crossings. Consequently, these data seem to come from a random process (which we already knew). 2.2 Adding control limits to produce a control chart We use the same technique to add the lower and upper control limits. Remember that the control limits are usually set to \\(CL \\pm 3 SD\\), where CL is the centre line and SD is the estimated standard deviation – that is, the standard deviation of the natural variation in data, not the pooled standard deviation that would include both random and any non-random variation. Again, since we know the parameters of the distribution, we use the theoretical population standard deviation (= 1) to calculate the control limits. # Create y-coordinates for the control limits lcl &lt;- rep(-3, length(y)) ucl &lt;- rep(3, length(y)) Finally, we need to expand the y-axis limits to make room not only for the data points but also the lines (Figure 2.3): # Plot data expanding y-axis to make room for all data and lines plot(y, type = &#39;o&#39;, ylim = range(y, lcl, ucl)) # Add lines lines(ucl) lines(cl) lines(lcl) Figure 2.3: Standardised control chart As expected, all data points fall within the control limits suggesting only random variation. Now, let’s mimic a shift in data by introducing four data points (21:24) from a normal distribution with mean = 3 (Figure 2.4): # Initialise random number generator to make results reproducible set.seed(19) # Introduce a shift in data y[21:24] &lt;- rnorm(4, mean = 3) # Plot control chart plot(y, type = &#39;o&#39;, ylim = range(y, lcl, ucl)) lines(ucl) lines(cl) lines(lcl) Figure 2.4: Control chart with data points outside the upper control limit (freaks) Note that only one of the four data points from the shift is above the upper control limit. This is a reminder that even large shifts in data are not guaranteed to show up immediately. Rather, shifts in data increases the chance that future data point will fall outside the limits. The chance of discovering a shift depends on two things: 1. the size of the shift; 2. how long we are willing to wait for a shift to show itself. 2.3 That’s all, Folks! So constructing an SPC chart using R may be done using only a few lines of code. In fact, most of the code in this chapter went to prepare the data to be plotted. The charts themselves are rather simple and plotting is the same every time: 1. plot the dots; 2. add the lines. Later we will wrap all the steps in a function that also automates the calculation of empirical centre and control lines, highlights signals of non-random variation in data, and makes plots that are a lot nicer to look at than the rather crude ones we have produces so far. In the next chapter we will calculate control limits for the control charts that are most commonly used in healthcare, “The Magnificent Seven”. This is all about estimating the standard deviation in data, which depends on the type of data. "],["limits.html", "Chapter 3 Calculating Control Limits for “The Magnificent Seven” 3.1 Measurement data 3.2 Count data Control chart constants", " Chapter 3 Calculating Control Limits for “The Magnificent Seven” In the previous chapter we established the basis for constructing SPC charts with R. In this chapter we will build a function that calculates the empirical standard deviations for the most common control chart types, “The Magnificent Seven”. To avoid repeating ourselves, let’s begin by creating a function to automate the plotting for us. spc &lt;- function( x, # x axis y = NULL, # data cl = NA, # centre line lcl = NA, # lower control limit ucl = NA, # upper control limit ... # other parameters passed to the plot() function ) { # if y is missing, set y to x and make a sequence for x if (is.null(y)) { y &lt;- x x &lt;- seq_along(y) } # repeat line values to match the length of y if (length(cl) == 1) cl &lt;- rep(cl, length(y)) if (length(lcl) == 1) lcl &lt;- rep(lcl, length(y)) if (length(ucl) == 1) ucl &lt;- rep(ucl, length(y)) # plot the dots and draw the lines plot(x, y, type = &#39;o&#39;, ylim = range(y, lcl, ucl, na.rm = TRUE), ...) lines(x, cl) lines(x, lcl) lines(x, ucl) } The spc() function takes five arguments of which only the first, x, is mandatory. If only x is provided, a simple line chart will be drawn from the x values. If y is also provided, x values will be used for the x axis. The line arguments (cl, lcl, ucl) are used (if provided) for the centre line and control limits respectively. Line arguments may be given as either single values or vectors of the same length as x. In addition, one may provide additional arguments for the plot() function, e.g. main, xlab, and ylab for title and axis labels. Let’s test it: set.seed(27) y &lt;- rnorm(24) x &lt;- seq_along(y) spc(x, y, cl = 0, lcl = -3, ucl = 3) Figure 3.1: Control chart With few exceptions we are now able to construct all kinds of control charts. All we need to know is how to calculate the centre line and the control limits. The formulas for calculation control limits for the most common control charts are provided in Table 3.1. Don’t be alarmed by the number of strange symbols, we will dissect the formulas one by one as we move along. Table 3.1: Formulas for calculating control limits Subgroups Chart type Control limits Assumed distribution Measurement data Averrages of 2 or more measurements X-bar \\(\\bar{\\bar{x}}\\pm A_{3}\\bar{s}\\) Normal Standard deviation of 2 or more measurements S \\(B_{3}\\bar{s};\\ B_{4}\\bar{s}\\) Normal Individual measurements I \\(\\bar{x}\\pm2.66\\overline{MR}\\) Normal Moving ranges of individual measurements MR \\(\\overline{MR}+3.267\\overline{MR}\\) Normal Count data Counts C \\(\\bar{c}\\pm3\\sqrt{\\bar{c}}\\) Poisson Rates U \\(\\bar{u}\\pm3\\sqrt{\\frac{\\bar{u}}{n_{i}}}\\) Poisson Proportions P \\(\\bar{p}\\pm3\\sqrt{\\frac{\\bar{p}(1-\\bar{p})}{n_{i}}}\\) Binomial Generally, data come in two flavours: measurement data and count data. Measurements are data that are measured on a continuous scale and may have decimals, for example height and weight or waiting times. Counts are positive integers that represent counts of a property or phenomenon, for example surgical complications, healthy babies, or patient falls. 3.1 Measurement data 3.1.1 X-bar chart The X-bar chart is appropriate when the subgroups consist of samples of two or more measurements. For example, at the obstetric department they are striving to improve response times for grade 2 caesarean sections. The goal is keep the times between the decision and delivery below 30 minutes. # read raw data csect &lt;- read.csv(&#39;data/csect.csv&#39;, colClasses = c(&#39;POSIXct&#39;, &#39;Date&#39;, &#39;integer&#39;)) # show the first 6 rows head(csect) ## datetime month delay ## 1 2016-01-06 02:55:40 2016-01-01 22 ## 2 2016-01-06 19:52:34 2016-01-01 22 ## 3 2016-01-07 01:50:43 2016-01-01 29 ## 4 2016-01-07 21:32:27 2016-01-01 28 ## 5 2016-01-09 13:56:09 2016-01-01 22 ## 6 2016-01-09 20:21:24 2016-01-01 20 The csect data frame contains the date and time, the month, and the number of minutes from decision to delivery for 208 grade 2 section over a two-year period. First, we aggregate data to find the mean and the standard deviation of delay times and the number of sections per month. # aggregate data by month csect.agg &lt;- aggregate(delay ~ month, csect, function(x) c(mean = mean(x), sd = sd(x), n = length(x))) # make data into a nice data frame csect.agg &lt;- do.call(data.frame, csect.agg) # print the first 6 rows head(csect.agg) ## month delay.mean delay.sd delay.n ## 1 2016-01-01 23.85714 3.387653 7 ## 2 2016-02-01 24.45455 6.137811 11 ## 3 2016-03-01 22.45455 6.638729 11 ## 4 2016-04-01 22.66667 3.041381 9 ## 5 2016-05-01 22.50000 3.891382 8 ## 6 2016-06-01 22.00000 6.204837 5 Next, we calculate the centre line and the control limits using the formula in Table 3.1 where \\(\\bar{\\bar{x}}\\) (pronounced x bar bar) is the weighted mean of the subgroup means; \\(\\bar{s}\\) (s bar) is the weighted mean of the subgroup standard deviations, and \\(A_3\\) is a constant that depends on the subgroup size. See ?? at the end of this chapter for the R code involved in calculating \\(A_3\\) and other constants for control chart construction. Using the spc() function we created before, we are now able to construct our first “real” SPC chart (Figure 3.2). with(csect.agg, { xbarbar &lt;- weighted.mean(delay.mean, delay.n) # centre line sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled standard deviation a3 &lt;- a3(delay.n) # A3 constant spc(x = month, y = delay.mean, cl = xbarbar, lcl = xbarbar - a3 * sbar, ucl = xbarbar + a3 * sbar) }) Figure 3.2: X bar chart Figure 3.2 shows the average delay time per month. On average the delay time is 23 minutes (= centre line) and all data points fall between the control limits suggesting that the process is stable and predictable. Note how the control limits vary from month to month reflecting the varying subgroup sizes – small subgroups \\(\\Rightarrow\\) wide limits; large subgroups \\(\\Rightarrow\\) narrow limits. Be careful not to fall for the temptation to conclude that since no months are above the target of 30 minutes, all is well. The 30-minute target concerns the delay time of individual sections, not the averages. Even if the averages are well below the target, individuals may be above, which we will see later when we get to the individuals (I) chart. 3.1.2 S chart The S chart is usually plotted alongside the X-bar chart and shows the within subgroup variation. It is useful for detecting changes in the spread of data over time. To calculate the centre and control limits for the S chart we need to know the pooled standard deviation, \\(\\bar{S}\\) (same as for the X-bar chart), and the two constants \\(B_3\\) and \\(B_4\\) From Table 3.1. with(csect.agg, { sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled SD, centre line b3 &lt;- b3(delay.n) # B3 constant b4 &lt;- b4(delay.n) # B4 constant spc(x = month, y = delay.sd, cl = sbar, lcl = b3 * sbar, ucl = b4 * sbar) }) Figure 3.3: S chart Figure 3.3 shows the average standard deviation of delay times per month. On average the standard deviation is 4.7 minuts minutes (= centre line) and all data points fall between the control limits suggesting that the process is stable and predictable. We may plot the X-bar and S charts together (Figure 3.4): with(csect.agg, { xbarbar &lt;- weighted.mean(delay.mean, delay.n) # pooled average sbar &lt;- weighted.mean(delay.sd, delay.n) # pooled standard deviation a3 &lt;- a3(delay.n) # A3 constant b3 &lt;- b3(delay.n) # B3 constant b4 &lt;- b4(delay.n) # B4 constant op &lt;- par(mfrow = c(2, 1), mar = c(3, 5, 2, 1)) spc(month, delay.mean, cl = xbarbar, lcl = xbarbar - a3 * sbar, ucl = xbarbar + a3 * sbar, main = &#39;X-bar Chart&#39;, xlab = &#39;&#39;) spc(month, delay.sd, cl = sbar, lcl = b3 * sbar, ucl = b4 * sbar, main = &#39;S chart&#39;, xlab = &#39;&#39;) par(op) }) Figure 3.4: X-bar and S charts 3.1.3 I chart (aka X chart) The “I” in “I chart” stand for “individuals” because it plots individual values from subgroups of size 1. I charts are also often referred to as X charts. I charts are useful when measurements come from individual units, for example waiting times for individual patients or daily measurements of blood pressure from a single patient. When subgroups consist of single values we use the pairwise absolute difference between data points or the average moving range (\\(\\bar{MR}\\)) as an estimate of the within subgroup variation. By multiplying this value with 2.66 we get an estimate of the process standard deviation. Let’s have a look at individual delay times for the latest 30 C-sections (Figure 3.5). with(tail(csect, 30), { xbar &lt;- mean(delay) amr &lt;- mean(abs(diff(delay))) spc(delay, cl = xbar, lcl = xbar - 2.66 * amr, ucl = xbar + 2.66 * amr) }) Figure 3.5: I-chart On average, the delay time is 23 minutes (as in the X-bar chart). A single data point lies way above the upper control limit suggesting that this case was special and that it might be useful to look for special causes in order to prevent this from happening again in the future. 3.1.4 MR-chart The MR-chart is a chart of the moving ranges from individual values. It’s the companion to the I-chart estimating the within subgroup variation of individual values. with(tail(csect, 30), { mr &lt;- c(NA, abs(diff(delay))) amr &lt;- mean(mr, na.rm = TRUE) spc(mr, cl = amr, lcl = amr - 3.267 * amr, ucl = amr + 3.267 * amr) }) Figure 3.6: MR-chart Note that there are one less moving range than individual values. To “synchronise” the charts, we add an NA value at the beginning of the MR-chart. Again, we may plot the two charts alongside each other (Figure 3.7): with(tail(csect, 30), { xbar &lt;- mean(delay) mr &lt;- c(NA, abs(diff(delay))) amr &lt;- mean(mr, na.rm = TRUE) op &lt;- par(mfrow = c(2, 1), mar = c(3, 5, 2, 1)) spc(delay, cl = xbar, lcl = xbar - 2.66 * amr, ucl = xbar + 2.66 * amr, main = &#39;I-chart&#39;, xlab = &#39;&#39;) spc(mr, cl = amr, lcl = amr - 3.267 * amr, ucl = amr + 3.267 * amr, main = &#39;MR-chart&#39;, xlab = &#39;Patietn #&#39;) par(op) }) Figure 3.7: I- and MR-charts In this case the MR-chart adds nothing to the interpretation. But in certain cases the MR-chart may reveal unusually large differences between successive data points, which may warrant further investigation. 3.2 Count data Count data come in several flavours depending on the type of counts involved. In this chapter we will limit ourselves to *defects and defectives**. Don’t take these terms too literally. They are simply statistician jargon for things to count and are contrary to what one might think not always unwanted. Defects are phenomena that happens from time to time and are usually rare and randomly distributed in time and space. Defects can for example be the number of cancer cells found in a microscopy slide, the number of traffic accidents in a month, or the number of shooting stars observed in the night sky. Defects may often be modelled by the poisson distribution. Defects may be presented as raw counts or rates. Defectives represent whole units of something that either possess or do not posses a certain property. Alternatively, the terms “successes” and “failures” are often used. Defectives can for example be surgical procedures that had one or more complications, patients who died (or survived), or procedures that completed according to a standard. Defectives may often be modelled by the binomial distribution. Defectives are usually presented as proportions or percentages. 3.2.1 C chart The C charts is the simplest and the easiest to calculate of all control charts. The standard deviation is simply estimated as the square root of the process mean. C charts are appropriate when counting phenomena from equally big chunks of time or space. Figure 3.8 shows the monthly number of C-sections per month in a C chart. with(csect.agg, { cbar &lt;- mean(delay.n) sigma3 &lt;- 3 * sqrt(cbar) spc(month, delay.n, cl = cbar, lcl = pmax(0, cbar - sigma3), ucl = cbar + sigma3) }) Figure 3.8: C chart The average number of C-sections is 8.7 per month. Note that the lower control limit is censored at 0 even though the formula results in a negative value, \\(8.7-3*\\sqrt{8.7}=-0.15\\). 3.2.2 U chart U charts are also used when counting defects. They are especially useful when the chunks of time or space are not equally sized. In our case we might want to adjust for the fact that months do not have equally many days, which (in theory) might skew our data. The U chart adjust for this “unequal area of opportunity” (hence the U) by presenting rates rather than raw counts. A rate differs from a percentage in that the numerator and denominator are different things. In our case number of C-sections and number of days (Figure 3.9). with(csect.agg, { # number of days in each month days_in_month &lt;- as.integer(diff(c(month, trunc(tail(month, 1) + 31, units = &#39;months&#39;)))) ubar &lt;- mean(delay.n / days_in_month) sigma3 &lt;- 3 * sqrt(ubar / days_in_month) spc(month, delay.n / days_in_month, cl = ubar, lcl = pmax(0, ubar - sigma3), ucl = ubar + sigma3) }) Figure 3.9: U chart In Figure 3.9 we have also censored the lower control limit at zero. 3.2.3 P chart P charts are for proportion or percentage defectives. In our example we could monitor the monthly proportion of C-sections that were on time (&lt; 30 minutes) (Figure 3.10. csect.agg$on_time &lt;- tapply(csect$delay, csect$month, function(x) sum(x &lt; 30)) with(csect.agg, { pbar &lt;- sum(on_time) / sum(delay.n) sigma3 &lt;- 3 * sqrt(pbar * (1 - pbar) / delay.n) spc(month, on_time / delay.n, cl = pbar, lcl = pmax(0, pbar - sigma3), ucl = pmin(1, pbar + sigma3)) }) Figure 3.10: P chart As is common with P charts, we have censored the lower and upper control limits at 0 and 1 (100%) respectively. Control chart constants a3 &lt;- function(n) { 3 / (c4(n) * sqrt(n)) } b3 &lt;- function(n) { pmax(0, 1 - 3 * c5(n) / c4(n)) } b4 &lt;- function(n) { 1 + 3 * c5(n) / c4(n) } c4 &lt;- function(n) { n[n &lt;= 1] &lt;- NA sqrt(2 / (n - 1)) * exp(lgamma(n / 2) - lgamma((n - 1) / 2)) } c5 &lt;- function(n) { sqrt(1 - c4(n) ^ 2) } "],["case1.html", "Chapter 4 Case 1:", " Chapter 4 Case 1: "],["case-2.html", "Chapter 5 Case 2:", " Chapter 5 Case 2: "],["hello-bookdown.html", "A Hello bookdown A.1 A section", " A Hello bookdown All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. A.1 A section All chapter sections start with a second-level (##) or higher heading followed by your section title, like the sections above and below here. You can have as many as you want within a chapter. An unnumbered section Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the shorter {-} at the end of the heading, like in this section. "],["cross.html", "B Cross-references B.1 Chapters and sub-chapters B.2 Captioned figures and tables", " B Cross-references Cross-references make it easier for your readers to find and link to elements in your book. B.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter B. If you prefer text as the link instead of a numbered reference use: any text you want can go here. B.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure B.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure B.1: Here is a nice figure! Don’t miss Table B.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table B.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 "],["parts.html", "C Parts", " C Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "D Footnotes and citations D.1 Footnotes D.2 Citations", " D Footnotes and citations D.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. D.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2024) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.org/knitr/. ———. 2024. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. This is a footnote.↩︎ "],["blocks.html", "E Blocks E.1 Equations E.2 Theorems and proofs E.3 Callout blocks", " E Blocks E.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{E.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (E.1). E.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem E.1. Theorem E.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. E.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "F Sharing your book F.1 Publishing F.2 404 pages F.3 Metadata for sharing", " F Sharing your book F.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html F.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. F.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References Mohammed, M A. 2024. Statistical Process Control. Elements of Improving Quality and Safety in Healthcare. Cambridge University Press. Montgomery, Douglas C. 2009. Statistical Quality Control: A Modern Introduction, Sixth Ed. John Wiley &amp; Sons. R Core Team. 2024. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/. Wheeler, Donald J. 2000. Understanding Variation – the Key to Managing Chaos. Knoxville, Tennessee: SPC Press. Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.org/knitr/. ———. 2024. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
